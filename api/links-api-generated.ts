/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContactsListConversationsReverseChronologicalOrderResponse } from '../models';
// @ts-ignore
import { CreateLink } from '../models';
// @ts-ignore
import { LinkResponse } from '../models';
// @ts-ignore
import { LinksListByIdAndTypeResponse } from '../models';
// @ts-ignore
import { UpdateLink } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LinksApi - axios parameter creator
 * @export
 */
export const LinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a link. You must supply either `pattern` or `external_url` in the request, but not both (`pattern` is for dynamic objects while `external_url` is for standard links). If `pattern` is provided, the API call updates the dynamic objects matching the exact pattern. If the link is resolved to an installed links integration, any name retrieved from the integration will override the provided name in the request.
         * @summary Create link
         * @param {CreateLink} [createLink] Link to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLink: async (createLink?: CreateLink, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createLink,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/links',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createLink, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a link.
         * @summary Get link
         * @param {string} linkId The link ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLink: async (linkId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('getLink', 'linkId', linkId)
            const localVarPath = `/links/{link_id}`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(linkId !== undefined ? linkId : `-link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/links/{link_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the links of the company paginated by id. Allows filtering by link type via the q.types param.
         * @summary List links
         * @param {string} [q] [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;types&#x60;, whose value should be a list of link types (examples - &#x60;web&#x60;, &#x60;jira&#x60;, &#x60;asana&#x60; ).
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the links. Only supports &#x60;id&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByIdAndType: async (q?: string, limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/links',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the conversations linked to a specific link. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List link conversations
         * @param {string} linkId The Link ID
         * @param {string} [q] [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the conversations. Only supports &#x60;date&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversations: async (linkId: string, q?: string, limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('listConversations', 'linkId', linkId)
            const localVarPath = `/links/{link_id}/conversations`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(linkId !== undefined ? linkId : `-link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/links/{link_id}/conversations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a link.
         * @summary Update a link
         * @param {string} linkId The link ID
         * @param {UpdateLink} [updateLink] Link fields to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLink: async (linkId: string, updateLink?: UpdateLink, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('updateLink', 'linkId', linkId)
            const localVarPath = `/links/{link_id}`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(linkId !== undefined ? linkId : `-link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateLink,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/links/{link_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateLink, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LinksApi - functional programming interface
 * @export
 */
export const LinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LinksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a link. You must supply either `pattern` or `external_url` in the request, but not both (`pattern` is for dynamic objects while `external_url` is for standard links). If `pattern` is provided, the API call updates the dynamic objects matching the exact pattern. If the link is resolved to an installed links integration, any name retrieved from the integration will override the provided name in the request.
         * @summary Create link
         * @param {LinksApiCreateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLink(requestParameters: LinksApiCreateLinkRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkResponse>> {
            const createLink: CreateLink = {
                name: requestParameters.name,
                external_url: requestParameters.external_url,
                pattern: requestParameters.pattern
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLink(createLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a link.
         * @summary Get link
         * @param {LinksApiGetLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLink(requestParameters: LinksApiGetLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLink(requestParameters.linkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the links of the company paginated by id. Allows filtering by link type via the q.types param.
         * @summary List links
         * @param {LinksApiListByIdAndTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByIdAndType(requestParameters: LinksApiListByIdAndTypeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinksListByIdAndTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByIdAndType(requestParameters.q, requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the conversations linked to a specific link. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List link conversations
         * @param {LinksApiListConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConversations(requestParameters: LinksApiListConversationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversations(requestParameters.linkId, requestParameters.q, requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a link.
         * @summary Update a link
         * @param {LinksApiUpdateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLink(requestParameters: LinksApiUpdateLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateLink: UpdateLink = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLink(requestParameters.linkId, updateLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LinksApi - factory interface
 * @export
 */
export const LinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LinksApiFp(configuration)
    return {
        /**
         * Create a link. You must supply either `pattern` or `external_url` in the request, but not both (`pattern` is for dynamic objects while `external_url` is for standard links). If `pattern` is provided, the API call updates the dynamic objects matching the exact pattern. If the link is resolved to an installed links integration, any name retrieved from the integration will override the provided name in the request.
         * @summary Create link
         * @param {LinksApiCreateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLink(requestParameters: LinksApiCreateLinkRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LinkResponse> {
            return localVarFp.createLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a link.
         * @summary Get link
         * @param {LinksApiGetLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLink(requestParameters: LinksApiGetLinkRequest, options?: AxiosRequestConfig): AxiosPromise<LinkResponse> {
            return localVarFp.getLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the links of the company paginated by id. Allows filtering by link type via the q.types param.
         * @summary List links
         * @param {LinksApiListByIdAndTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByIdAndType(requestParameters: LinksApiListByIdAndTypeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LinksListByIdAndTypeResponse> {
            return localVarFp.listByIdAndType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the conversations linked to a specific link. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List link conversations
         * @param {LinksApiListConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversations(requestParameters: LinksApiListConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse> {
            return localVarFp.listConversations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a link.
         * @summary Update a link
         * @param {LinksApiUpdateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLink(requestParameters: LinksApiUpdateLinkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLink(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLink operation in LinksApi.
 * @export
 * @interface LinksApiCreateLinkRequest
 */
export type LinksApiCreateLinkRequest = {
    
} & CreateLink

/**
 * Request parameters for getLink operation in LinksApi.
 * @export
 * @interface LinksApiGetLinkRequest
 */
export type LinksApiGetLinkRequest = {
    
    /**
    * The link ID
    * @type {string}
    * @memberof LinksApiGetLink
    */
    readonly linkId: string
    
}

/**
 * Request parameters for listByIdAndType operation in LinksApi.
 * @export
 * @interface LinksApiListByIdAndTypeRequest
 */
export type LinksApiListByIdAndTypeRequest = {
    
    /**
    * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `types`, whose value should be a list of link types (examples - `web`, `jira`, `asana` ).
    * @type {string}
    * @memberof LinksApiListByIdAndType
    */
    readonly q?: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof LinksApiListByIdAndType
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof LinksApiListByIdAndType
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the links. Only supports `id`.
    * @type {string}
    * @memberof LinksApiListByIdAndType
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof LinksApiListByIdAndType
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listConversations operation in LinksApi.
 * @export
 * @interface LinksApiListConversationsRequest
 */
export type LinksApiListConversationsRequest = {
    
    /**
    * The Link ID
    * @type {string}
    * @memberof LinksApiListConversations
    */
    readonly linkId: string
    
    /**
    * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
    * @type {string}
    * @memberof LinksApiListConversations
    */
    readonly q?: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof LinksApiListConversations
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof LinksApiListConversations
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the conversations. Only supports `date`.
    * @type {string}
    * @memberof LinksApiListConversations
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof LinksApiListConversations
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for updateLink operation in LinksApi.
 * @export
 * @interface LinksApiUpdateLinkRequest
 */
export type LinksApiUpdateLinkRequest = {
    
    /**
    * The link ID
    * @type {string}
    * @memberof LinksApiUpdateLink
    */
    readonly linkId: string
    
} & UpdateLink

/**
 * LinksApiGenerated - object-oriented interface
 * @export
 * @class LinksApiGenerated
 * @extends {BaseAPI}
 */
export class LinksApiGenerated extends BaseAPI {
    /**
     * Create a link. You must supply either `pattern` or `external_url` in the request, but not both (`pattern` is for dynamic objects while `external_url` is for standard links). If `pattern` is provided, the API call updates the dynamic objects matching the exact pattern. If the link is resolved to an installed links integration, any name retrieved from the integration will override the provided name in the request.
     * @summary Create link
     * @param {LinksApiCreateLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApiGenerated
     */
    public createLink(requestParameters: LinksApiCreateLinkRequest = {}, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).createLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a link.
     * @summary Get link
     * @param {LinksApiGetLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApiGenerated
     */
    public getLink(requestParameters: LinksApiGetLinkRequest, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).getLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the links of the company paginated by id. Allows filtering by link type via the q.types param.
     * @summary List links
     * @param {LinksApiListByIdAndTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApiGenerated
     */
    public listByIdAndType(requestParameters: LinksApiListByIdAndTypeRequest = {}, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).listByIdAndType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the conversations linked to a specific link. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @summary List link conversations
     * @param {LinksApiListConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApiGenerated
     */
    public listConversations(requestParameters: LinksApiListConversationsRequest, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).listConversations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a link.
     * @summary Update a link
     * @param {LinksApiUpdateLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApiGenerated
     */
    public updateLink(requestParameters: LinksApiUpdateLinkRequest, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).updateLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
