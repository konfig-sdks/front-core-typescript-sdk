/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConversationsListEventsResponse } from '../models';
// @ts-ignore
import { EventResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch an event. Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
         * @summary Get event
         * @param {string} eventId The event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (eventId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getEvent', 'eventId', eventId)
            const localVarPath = `/events/{event_id}`
                .replace(`{${"event_id"}}`, encodeURIComponent(String(eventId !== undefined ? eventId : `-event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/events/{event_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the detailed events which occured in the inboxes of the company ordered in reverse chronological order (newest first). Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
         * @summary List events
         * @param {string} [q] [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties &#x60;before&#x60;, &#x60;after&#x60;, or &#x60;types&#x60;. &#x60;before&#x60; and &#x60;after&#x60; should be a timestamp in seconds with up to 3 decimal places. &#x60;types&#x60; should be a list of [event types](https://dev.frontapp.com/reference/events).
         * @param {number} [limit] Max number of results per page (max 15)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the events. Only supports &#x60;created_at&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetailedInboxEvents: async (q?: string, limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch an event. Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
         * @summary Get event
         * @param {EventsApiGetEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(requestParameters: EventsApiGetEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(requestParameters.eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the detailed events which occured in the inboxes of the company ordered in reverse chronological order (newest first). Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
         * @summary List events
         * @param {EventsApiListDetailedInboxEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDetailedInboxEvents(requestParameters: EventsApiListDetailedInboxEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsListEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDetailedInboxEvents(requestParameters.q, requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Fetch an event. Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
         * @summary Get event
         * @param {EventsApiGetEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(requestParameters: EventsApiGetEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventResponse> {
            return localVarFp.getEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all the detailed events which occured in the inboxes of the company ordered in reverse chronological order (newest first). Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
         * @summary List events
         * @param {EventsApiListDetailedInboxEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetailedInboxEvents(requestParameters: EventsApiListDetailedInboxEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConversationsListEventsResponse> {
            return localVarFp.listDetailedInboxEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEvent operation in EventsApi.
 * @export
 * @interface EventsApiGetEventRequest
 */
export type EventsApiGetEventRequest = {
    
    /**
    * The event ID
    * @type {string}
    * @memberof EventsApiGetEvent
    */
    readonly eventId: string
    
}

/**
 * Request parameters for listDetailedInboxEvents operation in EventsApi.
 * @export
 * @interface EventsApiListDetailedInboxEventsRequest
 */
export type EventsApiListDetailedInboxEventsRequest = {
    
    /**
    * [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties `before`, `after`, or `types`. `before` and `after` should be a timestamp in seconds with up to 3 decimal places. `types` should be a list of [event types](https://dev.frontapp.com/reference/events).
    * @type {string}
    * @memberof EventsApiListDetailedInboxEvents
    */
    readonly q?: string
    
    /**
    * Max number of results per page (max 15)
    * @type {number}
    * @memberof EventsApiListDetailedInboxEvents
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof EventsApiListDetailedInboxEvents
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the events. Only supports `created_at`.
    * @type {string}
    * @memberof EventsApiListDetailedInboxEvents
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof EventsApiListDetailedInboxEvents
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * EventsApiGenerated - object-oriented interface
 * @export
 * @class EventsApiGenerated
 * @extends {BaseAPI}
 */
export class EventsApiGenerated extends BaseAPI {
    /**
     * Fetch an event. Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
     * @summary Get event
     * @param {EventsApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiGenerated
     */
    public getEvent(requestParameters: EventsApiGetEventRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all the detailed events which occured in the inboxes of the company ordered in reverse chronological order (newest first). Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
     * @summary List events
     * @param {EventsApiListDetailedInboxEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiGenerated
     */
    public listDetailedInboxEvents(requestParameters: EventsApiListDetailedInboxEventsRequest = {}, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).listDetailedInboxEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
