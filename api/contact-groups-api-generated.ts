/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountsListAccountContactsResponse } from '../models';
// @ts-ignore
import { AddContactsToGroup } from '../models';
// @ts-ignore
import { ContactGroupsListGroupsResponse } from '../models';
// @ts-ignore
import { CreateContactGroup } from '../models';
// @ts-ignore
import { RemoveContactsFromGroup } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContactGroupsApi - axios parameter creator
 * @export
 */
export const ContactGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add contacts to the requested group.
         * @summary Add contacts to group
         * @param {string} contactGroupId The contact group ID
         * @param {AddContactsToGroup} [addContactsToGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactsToGroup: async (contactGroupId: string, addContactsToGroup?: AddContactsToGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGroupId' is not null or undefined
            assertParamExists('addContactsToGroup', 'contactGroupId', contactGroupId)
            const localVarPath = `/contact_groups/{contact_group_id}/contacts`
                .replace(`{${"contact_group_id"}}`, encodeURIComponent(String(contactGroupId !== undefined ? contactGroupId : `-contact_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addContactsToGroup,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact_groups/{contact_group_id}/contacts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addContactsToGroup, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new contact group in the default team (workspace).
         * @summary Create group
         * @param {CreateContactGroup} [createContactGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGroup: async (createContactGroup?: CreateContactGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contact_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createContactGroup,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact_groups',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createContactGroup, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new contact group for the requested team (workspace).
         * @summary Create team group
         * @param {string} teamId The team ID
         * @param {CreateContactGroup} [createContactGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGroup_1: async (teamId: string, createContactGroup?: CreateContactGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createNewGroup_1', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/contact_groups`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createContactGroup,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/contact_groups',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createContactGroup, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new contact group for the requested teammate.
         * @summary Create teammate group
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {CreateContactGroup} [createContactGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeammateGroup: async (teammateId: string, createContactGroup?: CreateContactGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('createTeammateGroup', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/contact_groups`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createContactGroup,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/contact_groups',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createContactGroup, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a contact group.
         * @summary Delete group
         * @param {string} contactGroupId The contact group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (contactGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGroupId' is not null or undefined
            assertParamExists('deleteGroup', 'contactGroupId', contactGroupId)
            const localVarPath = `/contact_groups/{contact_group_id}`
                .replace(`{${"contact_group_id"}}`, encodeURIComponent(String(contactGroupId !== undefined ? contactGroupId : `-contact_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact_groups/{contact_group_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the contacts belonging to the requested group.
         * @summary List contacts in group
         * @param {string} contactGroupId The contact group ID
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupContacts: async (contactGroupId: string, pageToken?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGroupId' is not null or undefined
            assertParamExists('listGroupContacts', 'contactGroupId', contactGroupId)
            const localVarPath = `/contact_groups/{contact_group_id}/contacts`
                .replace(`{${"contact_group_id"}}`, encodeURIComponent(String(contactGroupId !== undefined ? contactGroupId : `-contact_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact_groups/{contact_group_id}/contacts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the contact groups.
         * @summary List groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contact_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact_groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List contact groups belonging to the requested team (workspace).
         * @summary List team groups
         * @param {string} teamId The team ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamGroups: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeamGroups', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/contact_groups`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/contact_groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the contact groups belonging to the requested teammate.
         * @summary List teammate groups
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateGroups: async (teammateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('listTeammateGroups', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/contact_groups`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/contact_groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove contacts from the requested group.
         * @summary Remove contacts from group
         * @param {string} contactGroupId The contact group ID
         * @param {RemoveContactsFromGroup} [removeContactsFromGroup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContacts: async (contactGroupId: string, removeContactsFromGroup?: RemoveContactsFromGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGroupId' is not null or undefined
            assertParamExists('removeContacts', 'contactGroupId', contactGroupId)
            const localVarPath = `/contact_groups/{contact_group_id}/contacts`
                .replace(`{${"contact_group_id"}}`, encodeURIComponent(String(contactGroupId !== undefined ? contactGroupId : `-contact_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: removeContactsFromGroup,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact_groups/{contact_group_id}/contacts',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(removeContactsFromGroup, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactGroupsApi - functional programming interface
 * @export
 */
export const ContactGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add contacts to the requested group.
         * @summary Add contacts to group
         * @param {ContactGroupsApiAddContactsToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactsToGroup(requestParameters: ContactGroupsApiAddContactsToGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const addContactsToGroup: AddContactsToGroup = {
                contact_ids: requestParameters.contact_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addContactsToGroup(requestParameters.contactGroupId, addContactsToGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new contact group in the default team (workspace).
         * @summary Create group
         * @param {ContactGroupsApiCreateNewGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewGroup(requestParameters: ContactGroupsApiCreateNewGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const createContactGroup: CreateContactGroup = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGroup(createContactGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new contact group for the requested team (workspace).
         * @summary Create team group
         * @param {ContactGroupsApiCreateNewGroup0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewGroup_1(requestParameters: ContactGroupsApiCreateNewGroup0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const createContactGroup: CreateContactGroup = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGroup_1(requestParameters.teamId, createContactGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new contact group for the requested teammate.
         * @summary Create teammate group
         * @param {ContactGroupsApiCreateTeammateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeammateGroup(requestParameters: ContactGroupsApiCreateTeammateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const createContactGroup: CreateContactGroup = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeammateGroup(requestParameters.teammateId, createContactGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a contact group.
         * @summary Delete group
         * @param {ContactGroupsApiDeleteGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(requestParameters: ContactGroupsApiDeleteGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(requestParameters.contactGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the contacts belonging to the requested group.
         * @summary List contacts in group
         * @param {ContactGroupsApiListGroupContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroupContacts(requestParameters: ContactGroupsApiListGroupContactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsListAccountContactsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroupContacts(requestParameters.contactGroupId, requestParameters.pageToken, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the contact groups.
         * @summary List groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactGroupsListGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List contact groups belonging to the requested team (workspace).
         * @summary List team groups
         * @param {ContactGroupsApiListTeamGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamGroups(requestParameters: ContactGroupsApiListTeamGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactGroupsListGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamGroups(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the contact groups belonging to the requested teammate.
         * @summary List teammate groups
         * @param {ContactGroupsApiListTeammateGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammateGroups(requestParameters: ContactGroupsApiListTeammateGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactGroupsListGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammateGroups(requestParameters.teammateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove contacts from the requested group.
         * @summary Remove contacts from group
         * @param {ContactGroupsApiRemoveContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContacts(requestParameters: ContactGroupsApiRemoveContactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const removeContactsFromGroup: RemoveContactsFromGroup = {
                contact_ids: requestParameters.contact_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeContacts(requestParameters.contactGroupId, removeContactsFromGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactGroupsApi - factory interface
 * @export
 */
export const ContactGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactGroupsApiFp(configuration)
    return {
        /**
         * Add contacts to the requested group.
         * @summary Add contacts to group
         * @param {ContactGroupsApiAddContactsToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactsToGroup(requestParameters: ContactGroupsApiAddContactsToGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addContactsToGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new contact group in the default team (workspace).
         * @summary Create group
         * @param {ContactGroupsApiCreateNewGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGroup(requestParameters: ContactGroupsApiCreateNewGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new contact group for the requested team (workspace).
         * @summary Create team group
         * @param {ContactGroupsApiCreateNewGroup0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGroup_1(requestParameters: ContactGroupsApiCreateNewGroup0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewGroup_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new contact group for the requested teammate.
         * @summary Create teammate group
         * @param {ContactGroupsApiCreateTeammateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeammateGroup(requestParameters: ContactGroupsApiCreateTeammateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTeammateGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a contact group.
         * @summary Delete group
         * @param {ContactGroupsApiDeleteGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(requestParameters: ContactGroupsApiDeleteGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the contacts belonging to the requested group.
         * @summary List contacts in group
         * @param {ContactGroupsApiListGroupContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupContacts(requestParameters: ContactGroupsApiListGroupContactsRequest, options?: AxiosRequestConfig): AxiosPromise<AccountsListAccountContactsResponse> {
            return localVarFp.listGroupContacts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the contact groups.
         * @summary List groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(options?: AxiosRequestConfig): AxiosPromise<ContactGroupsListGroupsResponse> {
            return localVarFp.listGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * List contact groups belonging to the requested team (workspace).
         * @summary List team groups
         * @param {ContactGroupsApiListTeamGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamGroups(requestParameters: ContactGroupsApiListTeamGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<ContactGroupsListGroupsResponse> {
            return localVarFp.listTeamGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the contact groups belonging to the requested teammate.
         * @summary List teammate groups
         * @param {ContactGroupsApiListTeammateGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateGroups(requestParameters: ContactGroupsApiListTeammateGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<ContactGroupsListGroupsResponse> {
            return localVarFp.listTeammateGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove contacts from the requested group.
         * @summary Remove contacts from group
         * @param {ContactGroupsApiRemoveContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContacts(requestParameters: ContactGroupsApiRemoveContactsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeContacts(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addContactsToGroup operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiAddContactsToGroupRequest
 */
export type ContactGroupsApiAddContactsToGroupRequest = {
    
    /**
    * The contact group ID
    * @type {string}
    * @memberof ContactGroupsApiAddContactsToGroup
    */
    readonly contactGroupId: string
    
} & AddContactsToGroup

/**
 * Request parameters for createNewGroup operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiCreateNewGroupRequest
 */
export type ContactGroupsApiCreateNewGroupRequest = {
    
} & CreateContactGroup

/**
 * Request parameters for createNewGroup_1 operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiCreateNewGroup0Request
 */
export type ContactGroupsApiCreateNewGroup0Request = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof ContactGroupsApiCreateNewGroup0
    */
    readonly teamId: string
    
} & CreateContactGroup

/**
 * Request parameters for createTeammateGroup operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiCreateTeammateGroupRequest
 */
export type ContactGroupsApiCreateTeammateGroupRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof ContactGroupsApiCreateTeammateGroup
    */
    readonly teammateId: string
    
} & CreateContactGroup

/**
 * Request parameters for deleteGroup operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiDeleteGroupRequest
 */
export type ContactGroupsApiDeleteGroupRequest = {
    
    /**
    * The contact group ID
    * @type {string}
    * @memberof ContactGroupsApiDeleteGroup
    */
    readonly contactGroupId: string
    
}

/**
 * Request parameters for listGroupContacts operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiListGroupContactsRequest
 */
export type ContactGroupsApiListGroupContactsRequest = {
    
    /**
    * The contact group ID
    * @type {string}
    * @memberof ContactGroupsApiListGroupContacts
    */
    readonly contactGroupId: string
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof ContactGroupsApiListGroupContacts
    */
    readonly pageToken?: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof ContactGroupsApiListGroupContacts
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listTeamGroups operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiListTeamGroupsRequest
 */
export type ContactGroupsApiListTeamGroupsRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof ContactGroupsApiListTeamGroups
    */
    readonly teamId: string
    
}

/**
 * Request parameters for listTeammateGroups operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiListTeammateGroupsRequest
 */
export type ContactGroupsApiListTeammateGroupsRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof ContactGroupsApiListTeammateGroups
    */
    readonly teammateId: string
    
}

/**
 * Request parameters for removeContacts operation in ContactGroupsApi.
 * @export
 * @interface ContactGroupsApiRemoveContactsRequest
 */
export type ContactGroupsApiRemoveContactsRequest = {
    
    /**
    * The contact group ID
    * @type {string}
    * @memberof ContactGroupsApiRemoveContacts
    */
    readonly contactGroupId: string
    
} & RemoveContactsFromGroup

/**
 * ContactGroupsApiGenerated - object-oriented interface
 * @export
 * @class ContactGroupsApiGenerated
 * @extends {BaseAPI}
 */
export class ContactGroupsApiGenerated extends BaseAPI {
    /**
     * Add contacts to the requested group.
     * @summary Add contacts to group
     * @param {ContactGroupsApiAddContactsToGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public addContactsToGroup(requestParameters: ContactGroupsApiAddContactsToGroupRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).addContactsToGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new contact group in the default team (workspace).
     * @summary Create group
     * @param {ContactGroupsApiCreateNewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public createNewGroup(requestParameters: ContactGroupsApiCreateNewGroupRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).createNewGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new contact group for the requested team (workspace).
     * @summary Create team group
     * @param {ContactGroupsApiCreateNewGroup0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public createNewGroup_1(requestParameters: ContactGroupsApiCreateNewGroup0Request, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).createNewGroup_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new contact group for the requested teammate.
     * @summary Create teammate group
     * @param {ContactGroupsApiCreateTeammateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public createTeammateGroup(requestParameters: ContactGroupsApiCreateTeammateGroupRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).createTeammateGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a contact group.
     * @summary Delete group
     * @param {ContactGroupsApiDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public deleteGroup(requestParameters: ContactGroupsApiDeleteGroupRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).deleteGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the contacts belonging to the requested group.
     * @summary List contacts in group
     * @param {ContactGroupsApiListGroupContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public listGroupContacts(requestParameters: ContactGroupsApiListGroupContactsRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).listGroupContacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the contact groups.
     * @summary List groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public listGroups(options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).listGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List contact groups belonging to the requested team (workspace).
     * @summary List team groups
     * @param {ContactGroupsApiListTeamGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public listTeamGroups(requestParameters: ContactGroupsApiListTeamGroupsRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).listTeamGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the contact groups belonging to the requested teammate.
     * @summary List teammate groups
     * @param {ContactGroupsApiListTeammateGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public listTeammateGroups(requestParameters: ContactGroupsApiListTeammateGroupsRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).listTeammateGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove contacts from the requested group.
     * @summary Remove contacts from group
     * @param {ContactGroupsApiRemoveContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactGroupsApiGenerated
     */
    public removeContacts(requestParameters: ContactGroupsApiRemoveContactsRequest, options?: AxiosRequestConfig) {
        return ContactGroupsApiFp(this.configuration).removeContacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
