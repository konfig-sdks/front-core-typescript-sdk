/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RulesListAllCompanyRulesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RulesApi - axios parameter creator
 * @export
 */
export const RulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch a rule.
         * @summary Get rule
         * @param {string} ruleId The Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule: async (ruleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('getRule', 'ruleId', ruleId)
            const localVarPath = `/rules/{rule_id}`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId !== undefined ? ruleId : `-rule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rules/{rule_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the company rules.
         * @summary List all company rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCompanyRules: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/rules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the rules of the company.
         * @summary List rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyRules: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the rules of a team (workspace).
         * @summary List team rules
         * @param {string} teamId The team ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamRules: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeamRules', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/rules`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/rules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the rules of a teammate.
         * @summary List teammate rules
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateRules: async (teammateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('listTeammateRules', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/rules`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/rules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RulesApi - functional programming interface
 * @export
 */
export const RulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch a rule.
         * @summary Get rule
         * @param {RulesApiGetRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRule(requestParameters: RulesApiGetRuleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRule(requestParameters.ruleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the company rules.
         * @summary List all company rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllCompanyRules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RulesListAllCompanyRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllCompanyRules(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the rules of the company.
         * @summary List rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyRules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RulesListAllCompanyRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyRules(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the rules of a team (workspace).
         * @summary List team rules
         * @param {RulesApiListTeamRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamRules(requestParameters: RulesApiListTeamRulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RulesListAllCompanyRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamRules(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the rules of a teammate.
         * @summary List teammate rules
         * @param {RulesApiListTeammateRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammateRules(requestParameters: RulesApiListTeammateRulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RulesListAllCompanyRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammateRules(requestParameters.teammateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RulesApi - factory interface
 * @export
 */
export const RulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RulesApiFp(configuration)
    return {
        /**
         * Fetch a rule.
         * @summary Get rule
         * @param {RulesApiGetRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule(requestParameters: RulesApiGetRuleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getRule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the company rules.
         * @summary List all company rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCompanyRules(options?: AxiosRequestConfig): AxiosPromise<RulesListAllCompanyRulesResponse> {
            return localVarFp.listAllCompanyRules(options).then((request) => request(axios, basePath));
        },
        /**
         * List the rules of the company.
         * @summary List rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyRules(options?: AxiosRequestConfig): AxiosPromise<RulesListAllCompanyRulesResponse> {
            return localVarFp.listCompanyRules(options).then((request) => request(axios, basePath));
        },
        /**
         * List the rules of a team (workspace).
         * @summary List team rules
         * @param {RulesApiListTeamRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamRules(requestParameters: RulesApiListTeamRulesRequest, options?: AxiosRequestConfig): AxiosPromise<RulesListAllCompanyRulesResponse> {
            return localVarFp.listTeamRules(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the rules of a teammate.
         * @summary List teammate rules
         * @param {RulesApiListTeammateRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateRules(requestParameters: RulesApiListTeammateRulesRequest, options?: AxiosRequestConfig): AxiosPromise<RulesListAllCompanyRulesResponse> {
            return localVarFp.listTeammateRules(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRule operation in RulesApi.
 * @export
 * @interface RulesApiGetRuleRequest
 */
export type RulesApiGetRuleRequest = {
    
    /**
    * The Rule ID
    * @type {string}
    * @memberof RulesApiGetRule
    */
    readonly ruleId: string
    
}

/**
 * Request parameters for listTeamRules operation in RulesApi.
 * @export
 * @interface RulesApiListTeamRulesRequest
 */
export type RulesApiListTeamRulesRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof RulesApiListTeamRules
    */
    readonly teamId: string
    
}

/**
 * Request parameters for listTeammateRules operation in RulesApi.
 * @export
 * @interface RulesApiListTeammateRulesRequest
 */
export type RulesApiListTeammateRulesRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof RulesApiListTeammateRules
    */
    readonly teammateId: string
    
}

/**
 * RulesApiGenerated - object-oriented interface
 * @export
 * @class RulesApiGenerated
 * @extends {BaseAPI}
 */
export class RulesApiGenerated extends BaseAPI {
    /**
     * Fetch a rule.
     * @summary Get rule
     * @param {RulesApiGetRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiGenerated
     */
    public getRule(requestParameters: RulesApiGetRuleRequest, options?: AxiosRequestConfig) {
        return RulesApiFp(this.configuration).getRule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the company rules.
     * @summary List all company rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiGenerated
     */
    public listAllCompanyRules(options?: AxiosRequestConfig) {
        return RulesApiFp(this.configuration).listAllCompanyRules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the rules of the company.
     * @summary List rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiGenerated
     */
    public listCompanyRules(options?: AxiosRequestConfig) {
        return RulesApiFp(this.configuration).listCompanyRules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the rules of a team (workspace).
     * @summary List team rules
     * @param {RulesApiListTeamRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiGenerated
     */
    public listTeamRules(requestParameters: RulesApiListTeamRulesRequest, options?: AxiosRequestConfig) {
        return RulesApiFp(this.configuration).listTeamRules(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the rules of a teammate.
     * @summary List teammate rules
     * @param {RulesApiListTeammateRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiGenerated
     */
    public listTeammateRules(requestParameters: RulesApiListTeammateRulesRequest, options?: AxiosRequestConfig) {
        return RulesApiFp(this.configuration).listTeammateRules(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
