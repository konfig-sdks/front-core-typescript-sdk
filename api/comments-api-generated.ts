/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommentsListConversationCommentsResponse } from '../models';
// @ts-ignore
import { CommentsListMentionedTeammatesResponse } from '../models';
// @ts-ignore
import { CreateComment } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
         * @summary Add comment
         * @param {string} conversationId The conversation ID
         * @param {CreateComment} [createComment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewComment: async (conversationId: string, createComment?: CreateComment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('addNewComment', 'conversationId', conversationId)
            const localVarPath = `/conversations/{conversation_id}/comments`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId !== undefined ? conversationId : `-conversation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createComment,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conversations/{conversation_id}/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createComment, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a comment.
         * @summary Get comment
         * @param {string} commentId The Comment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment: async (commentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('getComment', 'commentId', commentId)
            const localVarPath = `/comments/{comment_id}`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/comments/{comment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the comments in a conversation in reverse chronological order (newest first).
         * @summary List conversation comments
         * @param {string} conversationId The conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversationComments: async (conversationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('listConversationComments', 'conversationId', conversationId)
            const localVarPath = `/conversations/{conversation_id}/comments`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId !== undefined ? conversationId : `-conversation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conversations/{conversation_id}/comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the teammates mentioned in a comment.
         * @summary List comment mentions
         * @param {string} commentId The Comment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMentionedTeammates: async (commentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('listMentionedTeammates', 'commentId', commentId)
            const localVarPath = `/comments/{comment_id}/mentions`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/comments/{comment_id}/mentions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
         * @summary Add comment
         * @param {CommentsApiAddNewCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewComment(requestParameters: CommentsApiAddNewCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createComment: CreateComment = {
                author_id: requestParameters.author_id,
                body: requestParameters.body,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewComment(requestParameters.conversationId, createComment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a comment.
         * @summary Get comment
         * @param {CommentsApiGetCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComment(requestParameters: CommentsApiGetCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComment(requestParameters.commentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the comments in a conversation in reverse chronological order (newest first).
         * @summary List conversation comments
         * @param {CommentsApiListConversationCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConversationComments(requestParameters: CommentsApiListConversationCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsListConversationCommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversationComments(requestParameters.conversationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the teammates mentioned in a comment.
         * @summary List comment mentions
         * @param {CommentsApiListMentionedTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMentionedTeammates(requestParameters: CommentsApiListMentionedTeammatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsListMentionedTeammatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMentionedTeammates(requestParameters.commentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
         * @summary Add comment
         * @param {CommentsApiAddNewCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewComment(requestParameters: CommentsApiAddNewCommentRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addNewComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a comment.
         * @summary Get comment
         * @param {CommentsApiGetCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment(requestParameters: CommentsApiGetCommentRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the comments in a conversation in reverse chronological order (newest first).
         * @summary List conversation comments
         * @param {CommentsApiListConversationCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversationComments(requestParameters: CommentsApiListConversationCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<CommentsListConversationCommentsResponse> {
            return localVarFp.listConversationComments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the teammates mentioned in a comment.
         * @summary List comment mentions
         * @param {CommentsApiListMentionedTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMentionedTeammates(requestParameters: CommentsApiListMentionedTeammatesRequest, options?: AxiosRequestConfig): AxiosPromise<CommentsListMentionedTeammatesResponse> {
            return localVarFp.listMentionedTeammates(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewComment operation in CommentsApi.
 * @export
 * @interface CommentsApiAddNewCommentRequest
 */
export type CommentsApiAddNewCommentRequest = {
    
    /**
    * The conversation ID
    * @type {string}
    * @memberof CommentsApiAddNewComment
    */
    readonly conversationId: string
    
} & CreateComment

/**
 * Request parameters for getComment operation in CommentsApi.
 * @export
 * @interface CommentsApiGetCommentRequest
 */
export type CommentsApiGetCommentRequest = {
    
    /**
    * The Comment ID
    * @type {string}
    * @memberof CommentsApiGetComment
    */
    readonly commentId: string
    
}

/**
 * Request parameters for listConversationComments operation in CommentsApi.
 * @export
 * @interface CommentsApiListConversationCommentsRequest
 */
export type CommentsApiListConversationCommentsRequest = {
    
    /**
    * The conversation ID
    * @type {string}
    * @memberof CommentsApiListConversationComments
    */
    readonly conversationId: string
    
}

/**
 * Request parameters for listMentionedTeammates operation in CommentsApi.
 * @export
 * @interface CommentsApiListMentionedTeammatesRequest
 */
export type CommentsApiListMentionedTeammatesRequest = {
    
    /**
    * The Comment ID
    * @type {string}
    * @memberof CommentsApiListMentionedTeammates
    */
    readonly commentId: string
    
}

/**
 * CommentsApiGenerated - object-oriented interface
 * @export
 * @class CommentsApiGenerated
 * @extends {BaseAPI}
 */
export class CommentsApiGenerated extends BaseAPI {
    /**
     * Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
     * @summary Add comment
     * @param {CommentsApiAddNewCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public addNewComment(requestParameters: CommentsApiAddNewCommentRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).addNewComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a comment.
     * @summary Get comment
     * @param {CommentsApiGetCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public getComment(requestParameters: CommentsApiGetCommentRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).getComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the comments in a conversation in reverse chronological order (newest first).
     * @summary List conversation comments
     * @param {CommentsApiListConversationCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public listConversationComments(requestParameters: CommentsApiListConversationCommentsRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).listConversationComments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the teammates mentioned in a comment.
     * @summary List comment mentions
     * @param {CommentsApiListMentionedTeammatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public listMentionedTeammates(requestParameters: CommentsApiListMentionedTeammatesRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).listMentionedTeammates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
