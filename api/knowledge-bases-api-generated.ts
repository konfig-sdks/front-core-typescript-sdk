/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { KnowledgeBaseArticleCreate } from '../models';
// @ts-ignore
import { KnowledgeBaseArticlePatch } from '../models';
// @ts-ignore
import { KnowledgeBaseCategoryCreate } from '../models';
// @ts-ignore
import { KnowledgeBaseCategoryPatch } from '../models';
// @ts-ignore
import { KnowledgeBaseCreate } from '../models';
// @ts-ignore
import { KnowledgeBasePatch } from '../models';
// @ts-ignore
import { KnowledgeBasesListArticlesInCategoryResponse } from '../models';
// @ts-ignore
import { KnowledgeBasesListCategoriesInBaseResponse } from '../models';
// @ts-ignore
import { KnowledgeBasesListKnowledgeBasesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * KnowledgeBasesApi - axios parameter creator
 * @export
 */
export const KnowledgeBasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an article in a knowledge base in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create article in a knowledge base in default locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to create the article in
         * @param {KnowledgeBaseArticleCreate} [knowledgeBaseArticleCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleDefaultLocale: async (knowledgeBaseId: string, knowledgeBaseArticleCreate?: KnowledgeBaseArticleCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('createArticleDefaultLocale', 'knowledgeBaseId', knowledgeBaseId)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/articles`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseArticleCreate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/articles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseArticleCreate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an article for a given locale in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create article in a knowledge base in specified locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to create the article in
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the article\&#39;s content
         * @param {KnowledgeBaseArticleCreate} [knowledgeBaseArticleCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleLocale: async (knowledgeBaseId: string, locale: string, knowledgeBaseArticleCreate?: KnowledgeBaseArticleCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('createArticleLocale', 'knowledgeBaseId', knowledgeBaseId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('createArticleLocale', 'locale', locale)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/locales/{locale}/articles`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseArticleCreate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/articles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseArticleCreate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a knowledge base category in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create knowledge base category in default locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to create the category in
         * @param {KnowledgeBaseCategoryCreate} [knowledgeBaseCategoryCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategoryDefaultLocale: async (knowledgeBaseId: string, knowledgeBaseCategoryCreate?: KnowledgeBaseCategoryCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('createCategoryDefaultLocale', 'knowledgeBaseId', knowledgeBaseId)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/categories`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseCategoryCreate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/categories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseCategoryCreate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a knowledge base category for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create knowledge base category in specified locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to create the category in
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the category\&#39;s content
         * @param {KnowledgeBaseCategoryCreate} [knowledgeBaseCategoryCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategoryInLocale: async (knowledgeBaseId: string, locale: string, knowledgeBaseCategoryCreate?: KnowledgeBaseCategoryCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('createCategoryInLocale', 'knowledgeBaseId', knowledgeBaseId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('createCategoryInLocale', 'locale', locale)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/locales/{locale}/categories`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseCategoryCreate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/categories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseCategoryCreate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create a knowledge base
         * @param {KnowledgeBaseCreate} [knowledgeBaseCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewKnowledgeBase: async (knowledgeBaseCreate?: KnowledgeBaseCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/knowledge_bases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseCreate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseCreate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an article and all its content and translations.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Delete an article
         * @param {string} articleId The ID of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle: async (articleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('deleteArticle', 'articleId', articleId)
            const localVarPath = `/knowledge_base_articles/{article_id}`
                .replace(`{${"article_id"}}`, encodeURIComponent(String(articleId !== undefined ? articleId : `-article_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_articles/{article_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a knowledge base category.  > ⚠️ Warning > > When a category is deleted, all articles in the category are also deleted.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Delete a knowledge base category
         * @param {string} categoryId The ID of the category to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteCategory', 'categoryId', categoryId)
            const localVarPath = `/knowledge_base_categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_categories/{category_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads the attachment from an article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Download attachment from an article
         * @param {string} articleId The ID of the article
         * @param {string} attachmentId The ID of the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachmentArticle: async (articleId: string, attachmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('downloadAttachmentArticle', 'articleId', articleId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('downloadAttachmentArticle', 'attachmentId', attachmentId)
            const localVarPath = `/knowledge_base_articles/{article_id}/download/{attachment_id}`
                .replace(`{${"article_id"}}`, encodeURIComponent(String(articleId !== undefined ? articleId : `-article_id-`)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId !== undefined ? attachmentId : `-attachment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_articles/{article_id}/download/{attachment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base article
         * @param {string} articleId The ID of the article to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleById: async (articleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('getArticleById', 'articleId', articleId)
            const localVarPath = `/knowledge_base_articles/{article_id}`
                .replace(`{${"article_id"}}`, encodeURIComponent(String(articleId !== undefined ? articleId : `-article_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_articles/{article_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base article with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base article with content in specified locale
         * @param {string} articleId The ID of the article to fetch
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleContent: async (articleId: string, locale: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('getArticleContent', 'articleId', articleId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('getArticleContent', 'locale', locale)
            const localVarPath = `/knowledge_base_articles/{article_id}/locales/{locale}/content`
                .replace(`{${"article_id"}}`, encodeURIComponent(String(articleId !== undefined ? articleId : `-article_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_articles/{article_id}/locales/{locale}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base category
         * @param {string} categoryId The ID of the category to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getCategory', 'categoryId', categoryId)
            const localVarPath = `/knowledge_base_categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_categories/{category_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base category with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base category content in default locale
         * @param {string} categoryId The ID of the category to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryContentDefaultLocale: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getCategoryContentDefaultLocale', 'categoryId', categoryId)
            const localVarPath = `/knowledge_base_categories/{category_id}/content`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_categories/{category_id}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base category with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base category with content in specified locale
         * @param {string} categoryId The ID of the category to fetch
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryContentLocale: async (categoryId: string, locale: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getCategoryContentLocale', 'categoryId', categoryId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('getCategoryContentLocale', 'locale', locale)
            const localVarPath = `/knowledge_base_categories/{category_id}/locales/{locale}/content`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_categories/{category_id}/locales/{locale}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base article with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base article with content in default locale
         * @param {string} articleId The ID of the article to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDefaultLocale: async (articleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('getContentDefaultLocale', 'articleId', articleId)
            const localVarPath = `/knowledge_base_articles/{article_id}/content`
                .replace(`{${"article_id"}}`, encodeURIComponent(String(articleId !== undefined ? articleId : `-article_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_articles/{article_id}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base with its content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base with content in default locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDefaultLocale_1: async (knowledgeBaseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('getContentDefaultLocale_1', 'knowledgeBaseId', knowledgeBaseId)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/content`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base
         * @param {string} knowledgeBaseId The ID of the knowledge base to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgeBase: async (knowledgeBaseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('getKnowledgeBase', 'knowledgeBaseId', knowledgeBaseId)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a knowledge base with its content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base with content in specified locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to fetch
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgeBaseContentInLocale: async (knowledgeBaseId: string, locale: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('getKnowledgeBaseContentInLocale', 'knowledgeBaseId', knowledgeBaseId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('getKnowledgeBaseContentInLocale', 'locale', locale)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/locales/{locale}/content`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List articles in a knowledge base  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List articles in a knowledge base
         * @param {string} knowledgeBaseId The ID of the knowledge base
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticlesInBase: async (knowledgeBaseId: string, limit?: number, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('listArticlesInBase', 'knowledgeBaseId', knowledgeBaseId)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/articles`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/articles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List articles in a category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List articles in a category
         * @param {string} categoryId The ID of the category
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticlesInCategory: async (categoryId: string, limit?: number, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('listArticlesInCategory', 'categoryId', categoryId)
            const localVarPath = `/knowledge_base_categories/{category_id}/articles`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_categories/{category_id}/articles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List categories in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List categories in a knowledge base
         * @param {string} knowledgeBaseId The ID of the knowledge base
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategoriesInBase: async (knowledgeBaseId: string, limit?: number, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('listCategoriesInBase', 'knowledgeBaseId', knowledgeBaseId)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/categories`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the knowledge bases of the company.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List knowledge bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKnowledgeBases: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/knowledge_bases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an article\'s content in the default locale  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update article content in default locale.
         * @param {string} articleId The ID of the article to update
         * @param {KnowledgeBaseArticlePatch} [knowledgeBaseArticlePatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticleContentDefaultLocale: async (articleId: string, knowledgeBaseArticlePatch?: KnowledgeBaseArticlePatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('updateArticleContentDefaultLocale', 'articleId', articleId)
            const localVarPath = `/knowledge_base_articles/{article_id}/content`
                .replace(`{${"article_id"}}`, encodeURIComponent(String(articleId !== undefined ? articleId : `-article_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseArticlePatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_articles/{article_id}/content',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseArticlePatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an article\'s content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update article content in specified locale
         * @param {string} articleId The ID of the article to update
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
         * @param {KnowledgeBaseArticlePatch} [knowledgeBaseArticlePatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticleContentLocale: async (articleId: string, locale: string, knowledgeBaseArticlePatch?: KnowledgeBaseArticlePatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('updateArticleContentLocale', 'articleId', articleId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('updateArticleContentLocale', 'locale', locale)
            const localVarPath = `/knowledge_base_articles/{article_id}/locales/{locale}/content`
                .replace(`{${"article_id"}}`, encodeURIComponent(String(articleId !== undefined ? articleId : `-article_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseArticlePatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_articles/{article_id}/locales/{locale}/content',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseArticlePatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a knowledge base category for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base category in specified locale
         * @param {string} categoryId The ID of the category to update
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
         * @param {KnowledgeBaseCategoryPatch} [knowledgeBaseCategoryPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryContentLocale: async (categoryId: string, locale: string, knowledgeBaseCategoryPatch?: KnowledgeBaseCategoryPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updateCategoryContentLocale', 'categoryId', categoryId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('updateCategoryContentLocale', 'locale', locale)
            const localVarPath = `/knowledge_base_categories/{category_id}/locales/{locale}/content`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseCategoryPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_categories/{category_id}/locales/{locale}/content',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseCategoryPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a knowledge base category in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base category in default locale
         * @param {string} categoryId The ID of the category to update
         * @param {KnowledgeBaseCategoryPatch} [knowledgeBaseCategoryPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryDefaultLocale: async (categoryId: string, knowledgeBaseCategoryPatch?: KnowledgeBaseCategoryPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updateCategoryDefaultLocale', 'categoryId', categoryId)
            const localVarPath = `/knowledge_base_categories/{category_id}/content`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBaseCategoryPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_base_categories/{category_id}/content',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBaseCategoryPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base in default locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to update
         * @param {KnowledgeBasePatch} [knowledgeBasePatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultKnowledgeBase: async (knowledgeBaseId: string, knowledgeBasePatch?: KnowledgeBasePatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('updateDefaultKnowledgeBase', 'knowledgeBaseId', knowledgeBaseId)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/content`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBasePatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/content',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBasePatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base in specified locale
         * @param {string} knowledgeBaseId The ID of the knowledge base to update
         * @param {string} locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
         * @param {KnowledgeBasePatch} [knowledgeBasePatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKnowledgeBaseLocale: async (knowledgeBaseId: string, locale: string, knowledgeBasePatch?: KnowledgeBasePatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeBaseId' is not null or undefined
            assertParamExists('updateKnowledgeBaseLocale', 'knowledgeBaseId', knowledgeBaseId)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('updateKnowledgeBaseLocale', 'locale', locale)
            const localVarPath = `/knowledge_bases/{knowledge_base_id}/locales/{locale}/content`
                .replace(`{${"knowledge_base_id"}}`, encodeURIComponent(String(knowledgeBaseId !== undefined ? knowledgeBaseId : `-knowledge_base_id-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: knowledgeBasePatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(knowledgeBasePatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KnowledgeBasesApi - functional programming interface
 * @export
 */
export const KnowledgeBasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KnowledgeBasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an article in a knowledge base in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create article in a knowledge base in default locale
         * @param {KnowledgeBasesApiCreateArticleDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createArticleDefaultLocale(requestParameters: KnowledgeBasesApiCreateArticleDefaultLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseArticleCreate: KnowledgeBaseArticleCreate = {
                category_id: requestParameters.category_id,
                author_id: requestParameters.author_id,
                subject: requestParameters.subject,
                content: requestParameters.content,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createArticleDefaultLocale(requestParameters.knowledgeBaseId, knowledgeBaseArticleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an article for a given locale in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create article in a knowledge base in specified locale
         * @param {KnowledgeBasesApiCreateArticleLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createArticleLocale(requestParameters: KnowledgeBasesApiCreateArticleLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseArticleCreate: KnowledgeBaseArticleCreate = {
                category_id: requestParameters.category_id,
                author_id: requestParameters.author_id,
                subject: requestParameters.subject,
                content: requestParameters.content,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createArticleLocale(requestParameters.knowledgeBaseId, requestParameters.locale, knowledgeBaseArticleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a knowledge base category in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create knowledge base category in default locale
         * @param {KnowledgeBasesApiCreateCategoryDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategoryDefaultLocale(requestParameters: KnowledgeBasesApiCreateCategoryDefaultLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseCategoryCreate: KnowledgeBaseCategoryCreate = {
                description: requestParameters.description,
                parent_category_id: requestParameters.parent_category_id,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategoryDefaultLocale(requestParameters.knowledgeBaseId, knowledgeBaseCategoryCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a knowledge base category for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create knowledge base category in specified locale
         * @param {KnowledgeBasesApiCreateCategoryInLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategoryInLocale(requestParameters: KnowledgeBasesApiCreateCategoryInLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseCategoryCreate: KnowledgeBaseCategoryCreate = {
                description: requestParameters.description,
                parent_category_id: requestParameters.parent_category_id,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategoryInLocale(requestParameters.knowledgeBaseId, requestParameters.locale, knowledgeBaseCategoryCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create a knowledge base
         * @param {KnowledgeBasesApiCreateNewKnowledgeBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewKnowledgeBase(requestParameters: KnowledgeBasesApiCreateNewKnowledgeBaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseCreate: KnowledgeBaseCreate = {
                name: requestParameters.name,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewKnowledgeBase(knowledgeBaseCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an article and all its content and translations.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Delete an article
         * @param {KnowledgeBasesApiDeleteArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArticle(requestParameters: KnowledgeBasesApiDeleteArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArticle(requestParameters.articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a knowledge base category.  > ⚠️ Warning > > When a category is deleted, all articles in the category are also deleted.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Delete a knowledge base category
         * @param {KnowledgeBasesApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(requestParameters: KnowledgeBasesApiDeleteCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Downloads the attachment from an article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Download attachment from an article
         * @param {KnowledgeBasesApiDownloadAttachmentArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadAttachmentArticle(requestParameters: KnowledgeBasesApiDownloadAttachmentArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadAttachmentArticle(requestParameters.articleId, requestParameters.attachmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base article
         * @param {KnowledgeBasesApiGetArticleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticleById(requestParameters: KnowledgeBasesApiGetArticleByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticleById(requestParameters.articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base article with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base article with content in specified locale
         * @param {KnowledgeBasesApiGetArticleContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticleContent(requestParameters: KnowledgeBasesApiGetArticleContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticleContent(requestParameters.articleId, requestParameters.locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base category
         * @param {KnowledgeBasesApiGetCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory(requestParameters: KnowledgeBasesApiGetCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory(requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base category with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base category content in default locale
         * @param {KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryContentDefaultLocale(requestParameters: KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryContentDefaultLocale(requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base category with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base category with content in specified locale
         * @param {KnowledgeBasesApiGetCategoryContentLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryContentLocale(requestParameters: KnowledgeBasesApiGetCategoryContentLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryContentLocale(requestParameters.categoryId, requestParameters.locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base article with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base article with content in default locale
         * @param {KnowledgeBasesApiGetContentDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentDefaultLocale(requestParameters: KnowledgeBasesApiGetContentDefaultLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentDefaultLocale(requestParameters.articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base with its content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base with content in default locale
         * @param {KnowledgeBasesApiGetContentDefaultLocale0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentDefaultLocale_1(requestParameters: KnowledgeBasesApiGetContentDefaultLocale0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentDefaultLocale_1(requestParameters.knowledgeBaseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base
         * @param {KnowledgeBasesApiGetKnowledgeBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKnowledgeBase(requestParameters: KnowledgeBasesApiGetKnowledgeBaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKnowledgeBase(requestParameters.knowledgeBaseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a knowledge base with its content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base with content in specified locale
         * @param {KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKnowledgeBaseContentInLocale(requestParameters: KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKnowledgeBaseContentInLocale(requestParameters.knowledgeBaseId, requestParameters.locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List articles in a knowledge base  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List articles in a knowledge base
         * @param {KnowledgeBasesApiListArticlesInBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArticlesInBase(requestParameters: KnowledgeBasesApiListArticlesInBaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnowledgeBasesListArticlesInCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listArticlesInBase(requestParameters.knowledgeBaseId, requestParameters.limit, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List articles in a category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List articles in a category
         * @param {KnowledgeBasesApiListArticlesInCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArticlesInCategory(requestParameters: KnowledgeBasesApiListArticlesInCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnowledgeBasesListArticlesInCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listArticlesInCategory(requestParameters.categoryId, requestParameters.limit, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List categories in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List categories in a knowledge base
         * @param {KnowledgeBasesApiListCategoriesInBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategoriesInBase(requestParameters: KnowledgeBasesApiListCategoriesInBaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnowledgeBasesListCategoriesInBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategoriesInBase(requestParameters.knowledgeBaseId, requestParameters.limit, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the knowledge bases of the company.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List knowledge bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKnowledgeBases(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnowledgeBasesListKnowledgeBasesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listKnowledgeBases(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an article\'s content in the default locale  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update article content in default locale.
         * @param {KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArticleContentDefaultLocale(requestParameters: KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseArticlePatch: KnowledgeBaseArticlePatch = {
                author_id: requestParameters.author_id,
                subject: requestParameters.subject,
                content: requestParameters.content,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateArticleContentDefaultLocale(requestParameters.articleId, knowledgeBaseArticlePatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an article\'s content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update article content in specified locale
         * @param {KnowledgeBasesApiUpdateArticleContentLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArticleContentLocale(requestParameters: KnowledgeBasesApiUpdateArticleContentLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseArticlePatch: KnowledgeBaseArticlePatch = {
                author_id: requestParameters.author_id,
                subject: requestParameters.subject,
                content: requestParameters.content,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateArticleContentLocale(requestParameters.articleId, requestParameters.locale, knowledgeBaseArticlePatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a knowledge base category for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base category in specified locale
         * @param {KnowledgeBasesApiUpdateCategoryContentLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryContentLocale(requestParameters: KnowledgeBasesApiUpdateCategoryContentLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseCategoryPatch: KnowledgeBaseCategoryPatch = {
                description: requestParameters.description,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategoryContentLocale(requestParameters.categoryId, requestParameters.locale, knowledgeBaseCategoryPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a knowledge base category in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base category in default locale
         * @param {KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryDefaultLocale(requestParameters: KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBaseCategoryPatch: KnowledgeBaseCategoryPatch = {
                description: requestParameters.description,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategoryDefaultLocale(requestParameters.categoryId, knowledgeBaseCategoryPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base in default locale
         * @param {KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefaultKnowledgeBase(requestParameters: KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBasePatch: KnowledgeBasePatch = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefaultKnowledgeBase(requestParameters.knowledgeBaseId, knowledgeBasePatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base in specified locale
         * @param {KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateKnowledgeBaseLocale(requestParameters: KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const knowledgeBasePatch: KnowledgeBasePatch = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKnowledgeBaseLocale(requestParameters.knowledgeBaseId, requestParameters.locale, knowledgeBasePatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KnowledgeBasesApi - factory interface
 * @export
 */
export const KnowledgeBasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KnowledgeBasesApiFp(configuration)
    return {
        /**
         * Creates an article in a knowledge base in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create article in a knowledge base in default locale
         * @param {KnowledgeBasesApiCreateArticleDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleDefaultLocale(requestParameters: KnowledgeBasesApiCreateArticleDefaultLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createArticleDefaultLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an article for a given locale in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create article in a knowledge base in specified locale
         * @param {KnowledgeBasesApiCreateArticleLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleLocale(requestParameters: KnowledgeBasesApiCreateArticleLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createArticleLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a knowledge base category in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create knowledge base category in default locale
         * @param {KnowledgeBasesApiCreateCategoryDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategoryDefaultLocale(requestParameters: KnowledgeBasesApiCreateCategoryDefaultLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createCategoryDefaultLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a knowledge base category for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create knowledge base category in specified locale
         * @param {KnowledgeBasesApiCreateCategoryInLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategoryInLocale(requestParameters: KnowledgeBasesApiCreateCategoryInLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createCategoryInLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Create a knowledge base
         * @param {KnowledgeBasesApiCreateNewKnowledgeBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewKnowledgeBase(requestParameters: KnowledgeBasesApiCreateNewKnowledgeBaseRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewKnowledgeBase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an article and all its content and translations.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Delete an article
         * @param {KnowledgeBasesApiDeleteArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle(requestParameters: KnowledgeBasesApiDeleteArticleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteArticle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a knowledge base category.  > ⚠️ Warning > > When a category is deleted, all articles in the category are also deleted.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Delete a knowledge base category
         * @param {KnowledgeBasesApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(requestParameters: KnowledgeBasesApiDeleteCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads the attachment from an article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Download attachment from an article
         * @param {KnowledgeBasesApiDownloadAttachmentArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachmentArticle(requestParameters: KnowledgeBasesApiDownloadAttachmentArticleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.downloadAttachmentArticle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base article
         * @param {KnowledgeBasesApiGetArticleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleById(requestParameters: KnowledgeBasesApiGetArticleByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getArticleById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base article with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base article with content in specified locale
         * @param {KnowledgeBasesApiGetArticleContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleContent(requestParameters: KnowledgeBasesApiGetArticleContentRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getArticleContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base category
         * @param {KnowledgeBasesApiGetCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(requestParameters: KnowledgeBasesApiGetCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base category with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base category content in default locale
         * @param {KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryContentDefaultLocale(requestParameters: KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getCategoryContentDefaultLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base category with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base category with content in specified locale
         * @param {KnowledgeBasesApiGetCategoryContentLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryContentLocale(requestParameters: KnowledgeBasesApiGetCategoryContentLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getCategoryContentLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base article with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get knowledge base article with content in default locale
         * @param {KnowledgeBasesApiGetContentDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDefaultLocale(requestParameters: KnowledgeBasesApiGetContentDefaultLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getContentDefaultLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base with its content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base with content in default locale
         * @param {KnowledgeBasesApiGetContentDefaultLocale0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDefaultLocale_1(requestParameters: KnowledgeBasesApiGetContentDefaultLocale0Request, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getContentDefaultLocale_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base
         * @param {KnowledgeBasesApiGetKnowledgeBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgeBase(requestParameters: KnowledgeBasesApiGetKnowledgeBaseRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getKnowledgeBase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a knowledge base with its content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Get a knowledge base with content in specified locale
         * @param {KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgeBaseContentInLocale(requestParameters: KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getKnowledgeBaseContentInLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List articles in a knowledge base  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List articles in a knowledge base
         * @param {KnowledgeBasesApiListArticlesInBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticlesInBase(requestParameters: KnowledgeBasesApiListArticlesInBaseRequest, options?: AxiosRequestConfig): AxiosPromise<KnowledgeBasesListArticlesInCategoryResponse> {
            return localVarFp.listArticlesInBase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List articles in a category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List articles in a category
         * @param {KnowledgeBasesApiListArticlesInCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticlesInCategory(requestParameters: KnowledgeBasesApiListArticlesInCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<KnowledgeBasesListArticlesInCategoryResponse> {
            return localVarFp.listArticlesInCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List categories in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List categories in a knowledge base
         * @param {KnowledgeBasesApiListCategoriesInBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategoriesInBase(requestParameters: KnowledgeBasesApiListCategoriesInBaseRequest, options?: AxiosRequestConfig): AxiosPromise<KnowledgeBasesListCategoriesInBaseResponse> {
            return localVarFp.listCategoriesInBase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the knowledge bases of the company.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary List knowledge bases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKnowledgeBases(options?: AxiosRequestConfig): AxiosPromise<KnowledgeBasesListKnowledgeBasesResponse> {
            return localVarFp.listKnowledgeBases(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an article\'s content in the default locale  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update article content in default locale.
         * @param {KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticleContentDefaultLocale(requestParameters: KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateArticleContentDefaultLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an article\'s content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update article content in specified locale
         * @param {KnowledgeBasesApiUpdateArticleContentLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticleContentLocale(requestParameters: KnowledgeBasesApiUpdateArticleContentLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateArticleContentLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a knowledge base category for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base category in specified locale
         * @param {KnowledgeBasesApiUpdateCategoryContentLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryContentLocale(requestParameters: KnowledgeBasesApiUpdateCategoryContentLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateCategoryContentLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a knowledge base category in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base category in default locale
         * @param {KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryDefaultLocale(requestParameters: KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateCategoryDefaultLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base in default locale
         * @param {KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultKnowledgeBase(requestParameters: KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateDefaultKnowledgeBase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
         * @summary Update knowledge base in specified locale
         * @param {KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKnowledgeBaseLocale(requestParameters: KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateKnowledgeBaseLocale(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createArticleDefaultLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiCreateArticleDefaultLocaleRequest
 */
export type KnowledgeBasesApiCreateArticleDefaultLocaleRequest = {
    
    /**
    * The ID of the knowledge base to create the article in
    * @type {string}
    * @memberof KnowledgeBasesApiCreateArticleDefaultLocale
    */
    readonly knowledgeBaseId: string
    
} & KnowledgeBaseArticleCreate

/**
 * Request parameters for createArticleLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiCreateArticleLocaleRequest
 */
export type KnowledgeBasesApiCreateArticleLocaleRequest = {
    
    /**
    * The ID of the knowledge base to create the article in
    * @type {string}
    * @memberof KnowledgeBasesApiCreateArticleLocale
    */
    readonly knowledgeBaseId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the article\'s content
    * @type {string}
    * @memberof KnowledgeBasesApiCreateArticleLocale
    */
    readonly locale: string
    
} & KnowledgeBaseArticleCreate

/**
 * Request parameters for createCategoryDefaultLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiCreateCategoryDefaultLocaleRequest
 */
export type KnowledgeBasesApiCreateCategoryDefaultLocaleRequest = {
    
    /**
    * The ID of the knowledge base to create the category in
    * @type {string}
    * @memberof KnowledgeBasesApiCreateCategoryDefaultLocale
    */
    readonly knowledgeBaseId: string
    
} & KnowledgeBaseCategoryCreate

/**
 * Request parameters for createCategoryInLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiCreateCategoryInLocaleRequest
 */
export type KnowledgeBasesApiCreateCategoryInLocaleRequest = {
    
    /**
    * The ID of the knowledge base to create the category in
    * @type {string}
    * @memberof KnowledgeBasesApiCreateCategoryInLocale
    */
    readonly knowledgeBaseId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the category\'s content
    * @type {string}
    * @memberof KnowledgeBasesApiCreateCategoryInLocale
    */
    readonly locale: string
    
} & KnowledgeBaseCategoryCreate

/**
 * Request parameters for createNewKnowledgeBase operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiCreateNewKnowledgeBaseRequest
 */
export type KnowledgeBasesApiCreateNewKnowledgeBaseRequest = {
    
} & KnowledgeBaseCreate

/**
 * Request parameters for deleteArticle operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiDeleteArticleRequest
 */
export type KnowledgeBasesApiDeleteArticleRequest = {
    
    /**
    * The ID of the article to delete
    * @type {string}
    * @memberof KnowledgeBasesApiDeleteArticle
    */
    readonly articleId: string
    
}

/**
 * Request parameters for deleteCategory operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiDeleteCategoryRequest
 */
export type KnowledgeBasesApiDeleteCategoryRequest = {
    
    /**
    * The ID of the category to delete
    * @type {string}
    * @memberof KnowledgeBasesApiDeleteCategory
    */
    readonly categoryId: string
    
}

/**
 * Request parameters for downloadAttachmentArticle operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiDownloadAttachmentArticleRequest
 */
export type KnowledgeBasesApiDownloadAttachmentArticleRequest = {
    
    /**
    * The ID of the article
    * @type {string}
    * @memberof KnowledgeBasesApiDownloadAttachmentArticle
    */
    readonly articleId: string
    
    /**
    * The ID of the file to download
    * @type {string}
    * @memberof KnowledgeBasesApiDownloadAttachmentArticle
    */
    readonly attachmentId: string
    
}

/**
 * Request parameters for getArticleById operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetArticleByIdRequest
 */
export type KnowledgeBasesApiGetArticleByIdRequest = {
    
    /**
    * The ID of the article to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetArticleById
    */
    readonly articleId: string
    
}

/**
 * Request parameters for getArticleContent operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetArticleContentRequest
 */
export type KnowledgeBasesApiGetArticleContentRequest = {
    
    /**
    * The ID of the article to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetArticleContent
    */
    readonly articleId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetArticleContent
    */
    readonly locale: string
    
}

/**
 * Request parameters for getCategory operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetCategoryRequest
 */
export type KnowledgeBasesApiGetCategoryRequest = {
    
    /**
    * The ID of the category to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetCategory
    */
    readonly categoryId: string
    
}

/**
 * Request parameters for getCategoryContentDefaultLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest
 */
export type KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest = {
    
    /**
    * The ID of the category to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetCategoryContentDefaultLocale
    */
    readonly categoryId: string
    
}

/**
 * Request parameters for getCategoryContentLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetCategoryContentLocaleRequest
 */
export type KnowledgeBasesApiGetCategoryContentLocaleRequest = {
    
    /**
    * The ID of the category to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetCategoryContentLocale
    */
    readonly categoryId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetCategoryContentLocale
    */
    readonly locale: string
    
}

/**
 * Request parameters for getContentDefaultLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetContentDefaultLocaleRequest
 */
export type KnowledgeBasesApiGetContentDefaultLocaleRequest = {
    
    /**
    * The ID of the article to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetContentDefaultLocale
    */
    readonly articleId: string
    
}

/**
 * Request parameters for getContentDefaultLocale_1 operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetContentDefaultLocale0Request
 */
export type KnowledgeBasesApiGetContentDefaultLocale0Request = {
    
    /**
    * The ID of the knowledge base to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetContentDefaultLocale0
    */
    readonly knowledgeBaseId: string
    
}

/**
 * Request parameters for getKnowledgeBase operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetKnowledgeBaseRequest
 */
export type KnowledgeBasesApiGetKnowledgeBaseRequest = {
    
    /**
    * The ID of the knowledge base to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetKnowledgeBase
    */
    readonly knowledgeBaseId: string
    
}

/**
 * Request parameters for getKnowledgeBaseContentInLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest
 */
export type KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest = {
    
    /**
    * The ID of the knowledge base to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetKnowledgeBaseContentInLocale
    */
    readonly knowledgeBaseId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
    * @type {string}
    * @memberof KnowledgeBasesApiGetKnowledgeBaseContentInLocale
    */
    readonly locale: string
    
}

/**
 * Request parameters for listArticlesInBase operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiListArticlesInBaseRequest
 */
export type KnowledgeBasesApiListArticlesInBaseRequest = {
    
    /**
    * The ID of the knowledge base
    * @type {string}
    * @memberof KnowledgeBasesApiListArticlesInBase
    */
    readonly knowledgeBaseId: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof KnowledgeBasesApiListArticlesInBase
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof KnowledgeBasesApiListArticlesInBase
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for listArticlesInCategory operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiListArticlesInCategoryRequest
 */
export type KnowledgeBasesApiListArticlesInCategoryRequest = {
    
    /**
    * The ID of the category
    * @type {string}
    * @memberof KnowledgeBasesApiListArticlesInCategory
    */
    readonly categoryId: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof KnowledgeBasesApiListArticlesInCategory
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof KnowledgeBasesApiListArticlesInCategory
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for listCategoriesInBase operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiListCategoriesInBaseRequest
 */
export type KnowledgeBasesApiListCategoriesInBaseRequest = {
    
    /**
    * The ID of the knowledge base
    * @type {string}
    * @memberof KnowledgeBasesApiListCategoriesInBase
    */
    readonly knowledgeBaseId: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof KnowledgeBasesApiListCategoriesInBase
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof KnowledgeBasesApiListCategoriesInBase
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for updateArticleContentDefaultLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest
 */
export type KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest = {
    
    /**
    * The ID of the article to update
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateArticleContentDefaultLocale
    */
    readonly articleId: string
    
} & KnowledgeBaseArticlePatch

/**
 * Request parameters for updateArticleContentLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiUpdateArticleContentLocaleRequest
 */
export type KnowledgeBasesApiUpdateArticleContentLocaleRequest = {
    
    /**
    * The ID of the article to update
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateArticleContentLocale
    */
    readonly articleId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateArticleContentLocale
    */
    readonly locale: string
    
} & KnowledgeBaseArticlePatch

/**
 * Request parameters for updateCategoryContentLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiUpdateCategoryContentLocaleRequest
 */
export type KnowledgeBasesApiUpdateCategoryContentLocaleRequest = {
    
    /**
    * The ID of the category to update
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateCategoryContentLocale
    */
    readonly categoryId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateCategoryContentLocale
    */
    readonly locale: string
    
} & KnowledgeBaseCategoryPatch

/**
 * Request parameters for updateCategoryDefaultLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest
 */
export type KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest = {
    
    /**
    * The ID of the category to update
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateCategoryDefaultLocale
    */
    readonly categoryId: string
    
} & KnowledgeBaseCategoryPatch

/**
 * Request parameters for updateDefaultKnowledgeBase operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest
 */
export type KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest = {
    
    /**
    * The ID of the knowledge base to update
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateDefaultKnowledgeBase
    */
    readonly knowledgeBaseId: string
    
} & KnowledgeBasePatch

/**
 * Request parameters for updateKnowledgeBaseLocale operation in KnowledgeBasesApi.
 * @export
 * @interface KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest
 */
export type KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest = {
    
    /**
    * The ID of the knowledge base to update
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateKnowledgeBaseLocale
    */
    readonly knowledgeBaseId: string
    
    /**
    * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
    * @type {string}
    * @memberof KnowledgeBasesApiUpdateKnowledgeBaseLocale
    */
    readonly locale: string
    
} & KnowledgeBasePatch

/**
 * KnowledgeBasesApiGenerated - object-oriented interface
 * @export
 * @class KnowledgeBasesApiGenerated
 * @extends {BaseAPI}
 */
export class KnowledgeBasesApiGenerated extends BaseAPI {
    /**
     * Creates an article in a knowledge base in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Create article in a knowledge base in default locale
     * @param {KnowledgeBasesApiCreateArticleDefaultLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public createArticleDefaultLocale(requestParameters: KnowledgeBasesApiCreateArticleDefaultLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).createArticleDefaultLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an article for a given locale in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Create article in a knowledge base in specified locale
     * @param {KnowledgeBasesApiCreateArticleLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public createArticleLocale(requestParameters: KnowledgeBasesApiCreateArticleLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).createArticleLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a knowledge base category in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Create knowledge base category in default locale
     * @param {KnowledgeBasesApiCreateCategoryDefaultLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public createCategoryDefaultLocale(requestParameters: KnowledgeBasesApiCreateCategoryDefaultLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).createCategoryDefaultLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a knowledge base category for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Create knowledge base category in specified locale
     * @param {KnowledgeBasesApiCreateCategoryInLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public createCategoryInLocale(requestParameters: KnowledgeBasesApiCreateCategoryInLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).createCategoryInLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Create a knowledge base
     * @param {KnowledgeBasesApiCreateNewKnowledgeBaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public createNewKnowledgeBase(requestParameters: KnowledgeBasesApiCreateNewKnowledgeBaseRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).createNewKnowledgeBase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an article and all its content and translations.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Delete an article
     * @param {KnowledgeBasesApiDeleteArticleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public deleteArticle(requestParameters: KnowledgeBasesApiDeleteArticleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).deleteArticle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a knowledge base category.  > ⚠️ Warning > > When a category is deleted, all articles in the category are also deleted.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Delete a knowledge base category
     * @param {KnowledgeBasesApiDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public deleteCategory(requestParameters: KnowledgeBasesApiDeleteCategoryRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).deleteCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Downloads the attachment from an article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Download attachment from an article
     * @param {KnowledgeBasesApiDownloadAttachmentArticleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public downloadAttachmentArticle(requestParameters: KnowledgeBasesApiDownloadAttachmentArticleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).downloadAttachmentArticle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get a knowledge base article
     * @param {KnowledgeBasesApiGetArticleByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getArticleById(requestParameters: KnowledgeBasesApiGetArticleByIdRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getArticleById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base article with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get knowledge base article with content in specified locale
     * @param {KnowledgeBasesApiGetArticleContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getArticleContent(requestParameters: KnowledgeBasesApiGetArticleContentRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getArticleContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get a knowledge base category
     * @param {KnowledgeBasesApiGetCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getCategory(requestParameters: KnowledgeBasesApiGetCategoryRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base category with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get knowledge base category content in default locale
     * @param {KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getCategoryContentDefaultLocale(requestParameters: KnowledgeBasesApiGetCategoryContentDefaultLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getCategoryContentDefaultLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base category with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get knowledge base category with content in specified locale
     * @param {KnowledgeBasesApiGetCategoryContentLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getCategoryContentLocale(requestParameters: KnowledgeBasesApiGetCategoryContentLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getCategoryContentLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base article with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get knowledge base article with content in default locale
     * @param {KnowledgeBasesApiGetContentDefaultLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getContentDefaultLocale(requestParameters: KnowledgeBasesApiGetContentDefaultLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getContentDefaultLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base with its content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get a knowledge base with content in default locale
     * @param {KnowledgeBasesApiGetContentDefaultLocale0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getContentDefaultLocale_1(requestParameters: KnowledgeBasesApiGetContentDefaultLocale0Request, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getContentDefaultLocale_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get a knowledge base
     * @param {KnowledgeBasesApiGetKnowledgeBaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getKnowledgeBase(requestParameters: KnowledgeBasesApiGetKnowledgeBaseRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getKnowledgeBase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a knowledge base with its content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Get a knowledge base with content in specified locale
     * @param {KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public getKnowledgeBaseContentInLocale(requestParameters: KnowledgeBasesApiGetKnowledgeBaseContentInLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).getKnowledgeBaseContentInLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List articles in a knowledge base  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary List articles in a knowledge base
     * @param {KnowledgeBasesApiListArticlesInBaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public listArticlesInBase(requestParameters: KnowledgeBasesApiListArticlesInBaseRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).listArticlesInBase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List articles in a category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary List articles in a category
     * @param {KnowledgeBasesApiListArticlesInCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public listArticlesInCategory(requestParameters: KnowledgeBasesApiListArticlesInCategoryRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).listArticlesInCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List categories in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary List categories in a knowledge base
     * @param {KnowledgeBasesApiListCategoriesInBaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public listCategoriesInBase(requestParameters: KnowledgeBasesApiListCategoriesInBaseRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).listCategoriesInBase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the knowledge bases of the company.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary List knowledge bases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public listKnowledgeBases(options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).listKnowledgeBases(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an article\'s content in the default locale  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Update article content in default locale.
     * @param {KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public updateArticleContentDefaultLocale(requestParameters: KnowledgeBasesApiUpdateArticleContentDefaultLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).updateArticleContentDefaultLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an article\'s content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Update article content in specified locale
     * @param {KnowledgeBasesApiUpdateArticleContentLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public updateArticleContentLocale(requestParameters: KnowledgeBasesApiUpdateArticleContentLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).updateArticleContentLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a knowledge base category for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Update knowledge base category in specified locale
     * @param {KnowledgeBasesApiUpdateCategoryContentLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public updateCategoryContentLocale(requestParameters: KnowledgeBasesApiUpdateCategoryContentLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).updateCategoryContentLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a knowledge base category in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Update knowledge base category in default locale
     * @param {KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public updateCategoryDefaultLocale(requestParameters: KnowledgeBasesApiUpdateCategoryDefaultLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).updateCategoryDefaultLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Update knowledge base in default locale
     * @param {KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public updateDefaultKnowledgeBase(requestParameters: KnowledgeBasesApiUpdateDefaultKnowledgeBaseRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).updateDefaultKnowledgeBase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @summary Update knowledge base in specified locale
     * @param {KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBasesApiGenerated
     */
    public updateKnowledgeBaseLocale(requestParameters: KnowledgeBasesApiUpdateKnowledgeBaseLocaleRequest, options?: AxiosRequestConfig) {
        return KnowledgeBasesApiFp(this.configuration).updateKnowledgeBaseLocale(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
