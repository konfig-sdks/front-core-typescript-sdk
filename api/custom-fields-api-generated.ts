/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFieldsListAccountCustomFieldsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldsApi - axios parameter creator
 * @export
 */
export const CustomFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists the custom fields that can be attached to a Link.
         * @summary List Link\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/links/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/links/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the custom fields that can be attached to an Account.
         * @summary List Account\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountCustomFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the custom fields that can be attached to a Contact.  > ⚠️ Deprecated endpoint > > This endpoint has been deprecated. Please use the fully compatible `GET /contacts/custom_fields` endpoint instead. 
         * @summary List Contact\'s custom fields
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listContactCustomFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the custom fields that can be attached to a Contact.
         * @summary List Contact\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the custom fields that can be attached to a Conversation.
         * @summary List Conversation\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversationCustomFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conversations/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conversations/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the custom fields that can be attached to an Inbox.
         * @summary List Inbox\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboxCustomFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inboxes/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the custom fields that can be attached to a Teammate.
         * @summary List Teammate\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateCustomFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teammates/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldsApi - functional programming interface
 * @export
 */
export const CustomFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists the custom fields that can be attached to a Link.
         * @summary List Link\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAccountCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the custom fields that can be attached to an Account.
         * @summary List Account\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountCustomFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAccountCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountCustomFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the custom fields that can be attached to a Contact.  > ⚠️ Deprecated endpoint > > This endpoint has been deprecated. Please use the fully compatible `GET /contacts/custom_fields` endpoint instead. 
         * @summary List Contact\'s custom fields
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listContactCustomFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAccountCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContactCustomFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the custom fields that can be attached to a Contact.
         * @summary List Contact\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContactFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAccountCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContactFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the custom fields that can be attached to a Conversation.
         * @summary List Conversation\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConversationCustomFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAccountCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversationCustomFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the custom fields that can be attached to an Inbox.
         * @summary List Inbox\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboxCustomFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAccountCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboxCustomFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the custom fields that can be attached to a Teammate.
         * @summary List Teammate\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammateCustomFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAccountCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammateCustomFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldsApi - factory interface
 * @export
 */
export const CustomFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldsApiFp(configuration)
    return {
        /**
         * Lists the custom fields that can be attached to a Link.
         * @summary List Link\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListAccountCustomFieldsResponse> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the custom fields that can be attached to an Account.
         * @summary List Account\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountCustomFields(options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListAccountCustomFieldsResponse> {
            return localVarFp.listAccountCustomFields(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the custom fields that can be attached to a Contact.  > ⚠️ Deprecated endpoint > > This endpoint has been deprecated. Please use the fully compatible `GET /contacts/custom_fields` endpoint instead. 
         * @summary List Contact\'s custom fields
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listContactCustomFields(options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListAccountCustomFieldsResponse> {
            return localVarFp.listContactCustomFields(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the custom fields that can be attached to a Contact.
         * @summary List Contact\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactFields(options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListAccountCustomFieldsResponse> {
            return localVarFp.listContactFields(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the custom fields that can be attached to a Conversation.
         * @summary List Conversation\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversationCustomFields(options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListAccountCustomFieldsResponse> {
            return localVarFp.listConversationCustomFields(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the custom fields that can be attached to an Inbox.
         * @summary List Inbox\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboxCustomFields(options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListAccountCustomFieldsResponse> {
            return localVarFp.listInboxCustomFields(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the custom fields that can be attached to a Teammate.
         * @summary List Teammate\'s custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateCustomFields(options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListAccountCustomFieldsResponse> {
            return localVarFp.listTeammateCustomFields(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomFieldsApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldsApiGenerated extends BaseAPI {
    /**
     * Lists the custom fields that can be attached to a Link.
     * @summary List Link\'s custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the custom fields that can be attached to an Account.
     * @summary List Account\'s custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listAccountCustomFields(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listAccountCustomFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the custom fields that can be attached to a Contact.  > ⚠️ Deprecated endpoint > > This endpoint has been deprecated. Please use the fully compatible `GET /contacts/custom_fields` endpoint instead. 
     * @summary List Contact\'s custom fields
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listContactCustomFields(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listContactCustomFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the custom fields that can be attached to a Contact.
     * @summary List Contact\'s custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listContactFields(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listContactFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the custom fields that can be attached to a Conversation.
     * @summary List Conversation\'s custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listConversationCustomFields(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listConversationCustomFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the custom fields that can be attached to an Inbox.
     * @summary List Inbox\'s custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listInboxCustomFields(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listInboxCustomFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the custom fields that can be attached to a Teammate.
     * @summary List Teammate\'s custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listTeammateCustomFields(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listTeammateCustomFields(options).then((request) => request(this.axios, this.basePath));
    }
}
