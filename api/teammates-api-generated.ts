/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommentsListMentionedTeammatesResponse } from '../models';
// @ts-ignore
import { ContactsListConversationsReverseChronologicalOrderResponse } from '../models';
// @ts-ignore
import { ConversationsListInboxesResponse } from '../models';
// @ts-ignore
import { TeammateResponse } from '../models';
// @ts-ignore
import { UpdateTeammate } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeammatesApi - axios parameter creator
 * @export
 */
export const TeammatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns list of inboxes the teammate has access to.
         * @summary List teammate inboxes
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInboxList: async (teammateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('getInboxList', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/inboxes`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/inboxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a teammate.
         * @summary Get teammate
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeammateById: async (teammateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('getTeammateById', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the conversations assigned to a teammate in reverse chronological order (most recently updated first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List assigned conversations
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {string} [q] [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignedConversations: async (teammateId: string, q?: string, limit?: number, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('listAssignedConversations', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/conversations`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/conversations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the teammates in the company.
         * @summary List teammates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyMembers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teammates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a teammate.
         * @summary Update teammate
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {UpdateTeammate} [updateTeammate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeammate: async (teammateId: string, updateTeammate?: UpdateTeammate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('updateTeammate', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateTeammate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateTeammate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeammatesApi - functional programming interface
 * @export
 */
export const TeammatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeammatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns list of inboxes the teammate has access to.
         * @summary List teammate inboxes
         * @param {TeammatesApiGetInboxListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getInboxList(requestParameters: TeammatesApiGetInboxListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsListInboxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboxList(requestParameters.teammateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a teammate.
         * @summary Get teammate
         * @param {TeammatesApiGetTeammateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeammateById(requestParameters: TeammatesApiGetTeammateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeammateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeammateById(requestParameters.teammateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the conversations assigned to a teammate in reverse chronological order (most recently updated first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List assigned conversations
         * @param {TeammatesApiListAssignedConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssignedConversations(requestParameters: TeammatesApiListAssignedConversationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssignedConversations(requestParameters.teammateId, requestParameters.q, requestParameters.limit, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the teammates in the company.
         * @summary List teammates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyMembers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsListMentionedTeammatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyMembers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a teammate.
         * @summary Update teammate
         * @param {TeammatesApiUpdateTeammateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeammate(requestParameters: TeammatesApiUpdateTeammateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateTeammate: UpdateTeammate = {
                username: requestParameters.username,
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                is_available: requestParameters.is_available,
                custom_fields: requestParameters.custom_fields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeammate(requestParameters.teammateId, updateTeammate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeammatesApi - factory interface
 * @export
 */
export const TeammatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeammatesApiFp(configuration)
    return {
        /**
         * Returns list of inboxes the teammate has access to.
         * @summary List teammate inboxes
         * @param {TeammatesApiGetInboxListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInboxList(requestParameters: TeammatesApiGetInboxListRequest, options?: AxiosRequestConfig): AxiosPromise<ConversationsListInboxesResponse> {
            return localVarFp.getInboxList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a teammate.
         * @summary Get teammate
         * @param {TeammatesApiGetTeammateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeammateById(requestParameters: TeammatesApiGetTeammateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TeammateResponse> {
            return localVarFp.getTeammateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the conversations assigned to a teammate in reverse chronological order (most recently updated first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List assigned conversations
         * @param {TeammatesApiListAssignedConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignedConversations(requestParameters: TeammatesApiListAssignedConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse> {
            return localVarFp.listAssignedConversations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the teammates in the company.
         * @summary List teammates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyMembers(options?: AxiosRequestConfig): AxiosPromise<CommentsListMentionedTeammatesResponse> {
            return localVarFp.listCompanyMembers(options).then((request) => request(axios, basePath));
        },
        /**
         * Update a teammate.
         * @summary Update teammate
         * @param {TeammatesApiUpdateTeammateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeammate(requestParameters: TeammatesApiUpdateTeammateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTeammate(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInboxList operation in TeammatesApi.
 * @export
 * @interface TeammatesApiGetInboxListRequest
 */
export type TeammatesApiGetInboxListRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof TeammatesApiGetInboxList
    */
    readonly teammateId: string
    
}

/**
 * Request parameters for getTeammateById operation in TeammatesApi.
 * @export
 * @interface TeammatesApiGetTeammateByIdRequest
 */
export type TeammatesApiGetTeammateByIdRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof TeammatesApiGetTeammateById
    */
    readonly teammateId: string
    
}

/**
 * Request parameters for listAssignedConversations operation in TeammatesApi.
 * @export
 * @interface TeammatesApiListAssignedConversationsRequest
 */
export type TeammatesApiListAssignedConversationsRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof TeammatesApiListAssignedConversations
    */
    readonly teammateId: string
    
    /**
    * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
    * @type {string}
    * @memberof TeammatesApiListAssignedConversations
    */
    readonly q?: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof TeammatesApiListAssignedConversations
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof TeammatesApiListAssignedConversations
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for updateTeammate operation in TeammatesApi.
 * @export
 * @interface TeammatesApiUpdateTeammateRequest
 */
export type TeammatesApiUpdateTeammateRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof TeammatesApiUpdateTeammate
    */
    readonly teammateId: string
    
} & UpdateTeammate

/**
 * TeammatesApiGenerated - object-oriented interface
 * @export
 * @class TeammatesApiGenerated
 * @extends {BaseAPI}
 */
export class TeammatesApiGenerated extends BaseAPI {
    /**
     * Returns list of inboxes the teammate has access to.
     * @summary List teammate inboxes
     * @param {TeammatesApiGetInboxListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TeammatesApiGenerated
     */
    public getInboxList(requestParameters: TeammatesApiGetInboxListRequest, options?: AxiosRequestConfig) {
        return TeammatesApiFp(this.configuration).getInboxList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a teammate.
     * @summary Get teammate
     * @param {TeammatesApiGetTeammateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeammatesApiGenerated
     */
    public getTeammateById(requestParameters: TeammatesApiGetTeammateByIdRequest, options?: AxiosRequestConfig) {
        return TeammatesApiFp(this.configuration).getTeammateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the conversations assigned to a teammate in reverse chronological order (most recently updated first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @summary List assigned conversations
     * @param {TeammatesApiListAssignedConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeammatesApiGenerated
     */
    public listAssignedConversations(requestParameters: TeammatesApiListAssignedConversationsRequest, options?: AxiosRequestConfig) {
        return TeammatesApiFp(this.configuration).listAssignedConversations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the teammates in the company.
     * @summary List teammates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeammatesApiGenerated
     */
    public listCompanyMembers(options?: AxiosRequestConfig) {
        return TeammatesApiFp(this.configuration).listCompanyMembers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a teammate.
     * @summary Update teammate
     * @param {TeammatesApiUpdateTeammateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeammatesApiGenerated
     */
    public updateTeammate(requestParameters: TeammatesApiUpdateTeammateRequest, options?: AxiosRequestConfig) {
        return TeammatesApiFp(this.configuration).updateTeammate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
