/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePrivateSignature } from '../models';
// @ts-ignore
import { CreateSharedSignature } from '../models';
// @ts-ignore
import { SignaturesListTeammateResponse } from '../models';
// @ts-ignore
import { UpdateSignature } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SignaturesApi - axios parameter creator
 * @export
 */
export const SignaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new signature for the given team (workspace).
         * @summary Create team signature
         * @param {string} teamId The team ID
         * @param {CreateSharedSignature} [createSharedSignature] Signature to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamSignature: async (teamId: string, createSharedSignature?: CreateSharedSignature, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createTeamSignature', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/signatures`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createSharedSignature,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/signatures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createSharedSignature, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new signature for the given teammate
         * @summary Create teammate signature
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {CreatePrivateSignature} [createPrivateSignature] Signature to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeammateSignature: async (teammateId: string, createPrivateSignature?: CreatePrivateSignature, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('createTeammateSignature', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/signatures`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createPrivateSignature,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/signatures',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createPrivateSignature, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete signature
         * @summary Delete signature
         * @param {string} signatureId The signature ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignature: async (signatureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('deleteSignature', 'signatureId', signatureId)
            const localVarPath = `/signatures/{signature_id}`
                .replace(`{${"signature_id"}}`, encodeURIComponent(String(signatureId !== undefined ? signatureId : `-signature_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/signatures/{signature_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the given signature.
         * @summary Get signatures
         * @param {string} signatureId The signature ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignature: async (signatureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('getSignature', 'signatureId', signatureId)
            const localVarPath = `/signatures/{signature_id}`
                .replace(`{${"signature_id"}}`, encodeURIComponent(String(signatureId !== undefined ? signatureId : `-signature_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/signatures/{signature_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the signatures belonging to the given team (workspace).
         * @summary List team signatures
         * @param {string} teamId The team ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeam: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeam', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/signatures`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/signatures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the signatures belonging to the given teammate.
         * @summary List teammate signatures
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammate: async (teammateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('listTeammate', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/signatures`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/signatures',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update signature
         * @summary Update signature
         * @param {string} signatureId The signature ID
         * @param {UpdateSignature} [updateSignature] Signature to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignature: async (signatureId: string, updateSignature?: UpdateSignature, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('updateSignature', 'signatureId', signatureId)
            const localVarPath = `/signatures/{signature_id}`
                .replace(`{${"signature_id"}}`, encodeURIComponent(String(signatureId !== undefined ? signatureId : `-signature_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateSignature,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/signatures/{signature_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateSignature, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignaturesApi - functional programming interface
 * @export
 */
export const SignaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new signature for the given team (workspace).
         * @summary Create team signature
         * @param {SignaturesApiCreateTeamSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamSignature(requestParameters: SignaturesApiCreateTeamSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createSharedSignature: CreateSharedSignature = {
                name: requestParameters.name,
                sender_info: requestParameters.sender_info,
                body: requestParameters.body,
                is_visible_for_all_teammate_channels: requestParameters.is_visible_for_all_teammate_channels,
                is_default: requestParameters.is_default,
                channel_ids: requestParameters.channel_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamSignature(requestParameters.teamId, createSharedSignature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new signature for the given teammate
         * @summary Create teammate signature
         * @param {SignaturesApiCreateTeammateSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeammateSignature(requestParameters: SignaturesApiCreateTeammateSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createPrivateSignature: CreatePrivateSignature = {
                name: requestParameters.name,
                sender_info: requestParameters.sender_info,
                body: requestParameters.body,
                is_default: requestParameters.is_default,
                channel_ids: requestParameters.channel_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeammateSignature(requestParameters.teammateId, createPrivateSignature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete signature
         * @summary Delete signature
         * @param {SignaturesApiDeleteSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSignature(requestParameters: SignaturesApiDeleteSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSignature(requestParameters.signatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the given signature.
         * @summary Get signatures
         * @param {SignaturesApiGetSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignature(requestParameters: SignaturesApiGetSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignature(requestParameters.signatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the signatures belonging to the given team (workspace).
         * @summary List team signatures
         * @param {SignaturesApiListTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeam(requestParameters: SignaturesApiListTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignaturesListTeammateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeam(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the signatures belonging to the given teammate.
         * @summary List teammate signatures
         * @param {SignaturesApiListTeammateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammate(requestParameters: SignaturesApiListTeammateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignaturesListTeammateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammate(requestParameters.teammateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update signature
         * @summary Update signature
         * @param {SignaturesApiUpdateSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSignature(requestParameters: SignaturesApiUpdateSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const updateSignature: UpdateSignature = {
                name: requestParameters.name,
                sender_info: requestParameters.sender_info,
                body: requestParameters.body,
                is_visible_for_all_teammate_channels: requestParameters.is_visible_for_all_teammate_channels,
                is_default: requestParameters.is_default,
                channel_ids: requestParameters.channel_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSignature(requestParameters.signatureId, updateSignature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignaturesApi - factory interface
 * @export
 */
export const SignaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignaturesApiFp(configuration)
    return {
        /**
         * Create a new signature for the given team (workspace).
         * @summary Create team signature
         * @param {SignaturesApiCreateTeamSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamSignature(requestParameters: SignaturesApiCreateTeamSignatureRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createTeamSignature(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new signature for the given teammate
         * @summary Create teammate signature
         * @param {SignaturesApiCreateTeammateSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeammateSignature(requestParameters: SignaturesApiCreateTeammateSignatureRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createTeammateSignature(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete signature
         * @summary Delete signature
         * @param {SignaturesApiDeleteSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignature(requestParameters: SignaturesApiDeleteSignatureRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSignature(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the given signature.
         * @summary Get signatures
         * @param {SignaturesApiGetSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignature(requestParameters: SignaturesApiGetSignatureRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getSignature(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the signatures belonging to the given team (workspace).
         * @summary List team signatures
         * @param {SignaturesApiListTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeam(requestParameters: SignaturesApiListTeamRequest, options?: AxiosRequestConfig): AxiosPromise<SignaturesListTeammateResponse> {
            return localVarFp.listTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the signatures belonging to the given teammate.
         * @summary List teammate signatures
         * @param {SignaturesApiListTeammateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammate(requestParameters: SignaturesApiListTeammateRequest, options?: AxiosRequestConfig): AxiosPromise<SignaturesListTeammateResponse> {
            return localVarFp.listTeammate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update signature
         * @summary Update signature
         * @param {SignaturesApiUpdateSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignature(requestParameters: SignaturesApiUpdateSignatureRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateSignature(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTeamSignature operation in SignaturesApi.
 * @export
 * @interface SignaturesApiCreateTeamSignatureRequest
 */
export type SignaturesApiCreateTeamSignatureRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof SignaturesApiCreateTeamSignature
    */
    readonly teamId: string
    
} & CreateSharedSignature

/**
 * Request parameters for createTeammateSignature operation in SignaturesApi.
 * @export
 * @interface SignaturesApiCreateTeammateSignatureRequest
 */
export type SignaturesApiCreateTeammateSignatureRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof SignaturesApiCreateTeammateSignature
    */
    readonly teammateId: string
    
} & CreatePrivateSignature

/**
 * Request parameters for deleteSignature operation in SignaturesApi.
 * @export
 * @interface SignaturesApiDeleteSignatureRequest
 */
export type SignaturesApiDeleteSignatureRequest = {
    
    /**
    * The signature ID
    * @type {string}
    * @memberof SignaturesApiDeleteSignature
    */
    readonly signatureId: string
    
}

/**
 * Request parameters for getSignature operation in SignaturesApi.
 * @export
 * @interface SignaturesApiGetSignatureRequest
 */
export type SignaturesApiGetSignatureRequest = {
    
    /**
    * The signature ID
    * @type {string}
    * @memberof SignaturesApiGetSignature
    */
    readonly signatureId: string
    
}

/**
 * Request parameters for listTeam operation in SignaturesApi.
 * @export
 * @interface SignaturesApiListTeamRequest
 */
export type SignaturesApiListTeamRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof SignaturesApiListTeam
    */
    readonly teamId: string
    
}

/**
 * Request parameters for listTeammate operation in SignaturesApi.
 * @export
 * @interface SignaturesApiListTeammateRequest
 */
export type SignaturesApiListTeammateRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof SignaturesApiListTeammate
    */
    readonly teammateId: string
    
}

/**
 * Request parameters for updateSignature operation in SignaturesApi.
 * @export
 * @interface SignaturesApiUpdateSignatureRequest
 */
export type SignaturesApiUpdateSignatureRequest = {
    
    /**
    * The signature ID
    * @type {string}
    * @memberof SignaturesApiUpdateSignature
    */
    readonly signatureId: string
    
} & UpdateSignature

/**
 * SignaturesApiGenerated - object-oriented interface
 * @export
 * @class SignaturesApiGenerated
 * @extends {BaseAPI}
 */
export class SignaturesApiGenerated extends BaseAPI {
    /**
     * Create a new signature for the given team (workspace).
     * @summary Create team signature
     * @param {SignaturesApiCreateTeamSignatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApiGenerated
     */
    public createTeamSignature(requestParameters: SignaturesApiCreateTeamSignatureRequest, options?: AxiosRequestConfig) {
        return SignaturesApiFp(this.configuration).createTeamSignature(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new signature for the given teammate
     * @summary Create teammate signature
     * @param {SignaturesApiCreateTeammateSignatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApiGenerated
     */
    public createTeammateSignature(requestParameters: SignaturesApiCreateTeammateSignatureRequest, options?: AxiosRequestConfig) {
        return SignaturesApiFp(this.configuration).createTeammateSignature(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete signature
     * @summary Delete signature
     * @param {SignaturesApiDeleteSignatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApiGenerated
     */
    public deleteSignature(requestParameters: SignaturesApiDeleteSignatureRequest, options?: AxiosRequestConfig) {
        return SignaturesApiFp(this.configuration).deleteSignature(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the given signature.
     * @summary Get signatures
     * @param {SignaturesApiGetSignatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApiGenerated
     */
    public getSignature(requestParameters: SignaturesApiGetSignatureRequest, options?: AxiosRequestConfig) {
        return SignaturesApiFp(this.configuration).getSignature(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the signatures belonging to the given team (workspace).
     * @summary List team signatures
     * @param {SignaturesApiListTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApiGenerated
     */
    public listTeam(requestParameters: SignaturesApiListTeamRequest, options?: AxiosRequestConfig) {
        return SignaturesApiFp(this.configuration).listTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the signatures belonging to the given teammate.
     * @summary List teammate signatures
     * @param {SignaturesApiListTeammateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApiGenerated
     */
    public listTeammate(requestParameters: SignaturesApiListTeammateRequest, options?: AxiosRequestConfig) {
        return SignaturesApiFp(this.configuration).listTeammate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update signature
     * @summary Update signature
     * @param {SignaturesApiUpdateSignatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApiGenerated
     */
    public updateSignature(requestParameters: SignaturesApiUpdateSignatureRequest, options?: AxiosRequestConfig) {
        return SignaturesApiFp(this.configuration).updateSignature(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
