/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContactHandle } from '../models';
// @ts-ignore
import { DeleteContactHandle } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContactHandlesApi - axios parameter creator
 * @export
 */
export const ContactHandlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new handle to a contact.
         * @summary Add contact handle
         * @param {string} contactId The contact ID. Alternatively, you can supply the contact\&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {ContactHandle} [contactHandle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandle: async (contactId: string, contactHandle?: ContactHandle, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('addNewHandle', 'contactId', contactId)
            const localVarPath = `/contacts/{contact_id}/handles`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId !== undefined ? contactId : `-contact_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contactHandle,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{contact_id}/handles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contactHandle, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a handle from a contact.
         * @summary Delete contact handle
         * @param {string} contactId The contact ID. Alternatively, you can supply the contact\&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {DeleteContactHandle} [deleteContactHandle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeHandle: async (contactId: string, deleteContactHandle?: DeleteContactHandle, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('removeHandle', 'contactId', contactId)
            const localVarPath = `/contacts/{contact_id}/handles`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId !== undefined ? contactId : `-contact_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deleteContactHandle,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{contact_id}/handles',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deleteContactHandle, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactHandlesApi - functional programming interface
 * @export
 */
export const ContactHandlesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactHandlesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new handle to a contact.
         * @summary Add contact handle
         * @param {ContactHandlesApiAddNewHandleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewHandle(requestParameters: ContactHandlesApiAddNewHandleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const contactHandle: ContactHandle = {
                handle: requestParameters.handle,
                source: requestParameters.source
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewHandle(requestParameters.contactId, contactHandle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a handle from a contact.
         * @summary Delete contact handle
         * @param {ContactHandlesApiRemoveHandleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeHandle(requestParameters: ContactHandlesApiRemoveHandleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const deleteContactHandle: DeleteContactHandle = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeHandle(requestParameters.contactId, deleteContactHandle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactHandlesApi - factory interface
 * @export
 */
export const ContactHandlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactHandlesApiFp(configuration)
    return {
        /**
         * Adds a new handle to a contact.
         * @summary Add contact handle
         * @param {ContactHandlesApiAddNewHandleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandle(requestParameters: ContactHandlesApiAddNewHandleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addNewHandle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a handle from a contact.
         * @summary Delete contact handle
         * @param {ContactHandlesApiRemoveHandleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeHandle(requestParameters: ContactHandlesApiRemoveHandleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeHandle(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewHandle operation in ContactHandlesApi.
 * @export
 * @interface ContactHandlesApiAddNewHandleRequest
 */
export type ContactHandlesApiAddNewHandleRequest = {
    
    /**
    * The contact ID. Alternatively, you can supply the contact\'s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof ContactHandlesApiAddNewHandle
    */
    readonly contactId: string
    
} & ContactHandle

/**
 * Request parameters for removeHandle operation in ContactHandlesApi.
 * @export
 * @interface ContactHandlesApiRemoveHandleRequest
 */
export type ContactHandlesApiRemoveHandleRequest = {
    
    /**
    * The contact ID. Alternatively, you can supply the contact\'s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof ContactHandlesApiRemoveHandle
    */
    readonly contactId: string
    
} & DeleteContactHandle

/**
 * ContactHandlesApiGenerated - object-oriented interface
 * @export
 * @class ContactHandlesApiGenerated
 * @extends {BaseAPI}
 */
export class ContactHandlesApiGenerated extends BaseAPI {
    /**
     * Adds a new handle to a contact.
     * @summary Add contact handle
     * @param {ContactHandlesApiAddNewHandleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactHandlesApiGenerated
     */
    public addNewHandle(requestParameters: ContactHandlesApiAddNewHandleRequest, options?: AxiosRequestConfig) {
        return ContactHandlesApiFp(this.configuration).addNewHandle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a handle from a contact.
     * @summary Delete contact handle
     * @param {ContactHandlesApiRemoveHandleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactHandlesApiGenerated
     */
    public removeHandle(requestParameters: ContactHandlesApiRemoveHandleRequest, options?: AxiosRequestConfig) {
        return ContactHandlesApiFp(this.configuration).removeHandle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
