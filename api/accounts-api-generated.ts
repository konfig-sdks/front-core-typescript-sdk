/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Account } from '../models';
// @ts-ignore
import { AccountPatch } from '../models';
// @ts-ignore
import { AccountsListAccountContactsResponse } from '../models';
// @ts-ignore
import { AccountsListCompanyAccountsResponse } from '../models';
// @ts-ignore
import { ContactIds } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a list of contacts to an Account
         * @summary Add contact to Account
         * @param {string} accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {ContactIds} [contactIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactsToAccount: async (accountId: string, contactIds?: ContactIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('addContactsToAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/contacts`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contactIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}/contacts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contactIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new account.
         * @summary Create account
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount: async (account?: Account, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: account,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an account
         * @summary Delete an account
         * @param {string} accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches an account
         * @summary Fetch an account
         * @param {string} accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the contacts associated with an Account
         * @summary List account contacts
         * @param {string} accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the contacts. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountContacts: async (accountId: string, pageToken?: string, limit?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listAccountContacts', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/contacts`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}/contacts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the accounts of the company.
         * @summary List Accounts
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the accounts. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyAccounts: async (limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a list of contacts from an Account
         * @summary Remove contact from Account
         * @param {string} accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {ContactIds} [contactIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContactFrom: async (accountId: string, contactIds?: ContactIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('removeContactFrom', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/contacts`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contactIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}/contacts',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contactIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an account.
         * @summary Update account
         * @param {string} accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {AccountPatch} [accountPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (accountId: string, accountPatch?: AccountPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a list of contacts to an Account
         * @summary Add contact to Account
         * @param {AccountsApiAddContactsToAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactsToAccount(requestParameters: AccountsApiAddContactsToAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const contactIds: ContactIds = {
                contact_ids: requestParameters.contact_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addContactsToAccount(requestParameters.accountId, contactIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new account.
         * @summary Create account
         * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const account: Account = {
                description: requestParameters.description,
                name: requestParameters.name,
                domains: requestParameters.domains,
                external_id: requestParameters.external_id,
                custom_fields: requestParameters.custom_fields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAccount(account, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an account
         * @summary Delete an account
         * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(requestParameters: AccountsApiDeleteAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches an account
         * @summary Fetch an account
         * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(requestParameters: AccountsApiGetAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the contacts associated with an Account
         * @summary List account contacts
         * @param {AccountsApiListAccountContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountContacts(requestParameters: AccountsApiListAccountContactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsListAccountContactsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountContacts(requestParameters.accountId, requestParameters.pageToken, requestParameters.limit, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the accounts of the company.
         * @summary List Accounts
         * @param {AccountsApiListCompanyAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyAccounts(requestParameters: AccountsApiListCompanyAccountsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsListCompanyAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyAccounts(requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a list of contacts from an Account
         * @summary Remove contact from Account
         * @param {AccountsApiRemoveContactFromRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContactFrom(requestParameters: AccountsApiRemoveContactFromRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const contactIds: ContactIds = {
                contact_ids: requestParameters.contact_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeContactFrom(requestParameters.accountId, contactIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an account.
         * @summary Update account
         * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(requestParameters: AccountsApiUpdateAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const accountPatch: AccountPatch = {
                description: requestParameters.description,
                name: requestParameters.name,
                domains: requestParameters.domains,
                custom_fields: requestParameters.custom_fields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(requestParameters.accountId, accountPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Adds a list of contacts to an Account
         * @summary Add contact to Account
         * @param {AccountsApiAddContactsToAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactsToAccount(requestParameters: AccountsApiAddContactsToAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addContactsToAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new account.
         * @summary Create account
         * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an account
         * @summary Delete an account
         * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(requestParameters: AccountsApiDeleteAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches an account
         * @summary Fetch an account
         * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(requestParameters: AccountsApiGetAccountRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the contacts associated with an Account
         * @summary List account contacts
         * @param {AccountsApiListAccountContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountContacts(requestParameters: AccountsApiListAccountContactsRequest, options?: AxiosRequestConfig): AxiosPromise<AccountsListAccountContactsResponse> {
            return localVarFp.listAccountContacts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the accounts of the company.
         * @summary List Accounts
         * @param {AccountsApiListCompanyAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyAccounts(requestParameters: AccountsApiListCompanyAccountsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountsListCompanyAccountsResponse> {
            return localVarFp.listCompanyAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a list of contacts from an Account
         * @summary Remove contact from Account
         * @param {AccountsApiRemoveContactFromRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContactFrom(requestParameters: AccountsApiRemoveContactFromRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeContactFrom(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an account.
         * @summary Update account
         * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(requestParameters: AccountsApiUpdateAccountRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addContactsToAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiAddContactsToAccountRequest
 */
export type AccountsApiAddContactsToAccountRequest = {
    
    /**
    * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof AccountsApiAddContactsToAccount
    */
    readonly accountId: string
    
} & ContactIds

/**
 * Request parameters for createNewAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateNewAccountRequest
 */
export type AccountsApiCreateNewAccountRequest = {
    
} & Account

/**
 * Request parameters for deleteAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiDeleteAccountRequest
 */
export type AccountsApiDeleteAccountRequest = {
    
    /**
    * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof AccountsApiDeleteAccount
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountRequest
 */
export type AccountsApiGetAccountRequest = {
    
    /**
    * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof AccountsApiGetAccount
    */
    readonly accountId: string
    
}

/**
 * Request parameters for listAccountContacts operation in AccountsApi.
 * @export
 * @interface AccountsApiListAccountContactsRequest
 */
export type AccountsApiListAccountContactsRequest = {
    
    /**
    * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof AccountsApiListAccountContacts
    */
    readonly accountId: string
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof AccountsApiListAccountContacts
    */
    readonly pageToken?: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof AccountsApiListAccountContacts
    */
    readonly limit?: number
    
    /**
    * Field used to sort the contacts. Either `created_at` or `updated_at`.
    * @type {string}
    * @memberof AccountsApiListAccountContacts
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof AccountsApiListAccountContacts
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listCompanyAccounts operation in AccountsApi.
 * @export
 * @interface AccountsApiListCompanyAccountsRequest
 */
export type AccountsApiListCompanyAccountsRequest = {
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof AccountsApiListCompanyAccounts
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof AccountsApiListCompanyAccounts
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the accounts. Either `created_at` or `updated_at`.
    * @type {string}
    * @memberof AccountsApiListCompanyAccounts
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof AccountsApiListCompanyAccounts
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for removeContactFrom operation in AccountsApi.
 * @export
 * @interface AccountsApiRemoveContactFromRequest
 */
export type AccountsApiRemoveContactFromRequest = {
    
    /**
    * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof AccountsApiRemoveContactFrom
    */
    readonly accountId: string
    
} & ContactIds

/**
 * Request parameters for updateAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountRequest
 */
export type AccountsApiUpdateAccountRequest = {
    
    /**
    * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof AccountsApiUpdateAccount
    */
    readonly accountId: string
    
} & AccountPatch

/**
 * AccountsApiGenerated - object-oriented interface
 * @export
 * @class AccountsApiGenerated
 * @extends {BaseAPI}
 */
export class AccountsApiGenerated extends BaseAPI {
    /**
     * Adds a list of contacts to an Account
     * @summary Add contact to Account
     * @param {AccountsApiAddContactsToAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public addContactsToAccount(requestParameters: AccountsApiAddContactsToAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).addContactsToAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new account.
     * @summary Create account
     * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).createNewAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an account
     * @summary Delete an account
     * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public deleteAccount(requestParameters: AccountsApiDeleteAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).deleteAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches an account
     * @summary Fetch an account
     * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getAccount(requestParameters: AccountsApiGetAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the contacts associated with an Account
     * @summary List account contacts
     * @param {AccountsApiListAccountContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public listAccountContacts(requestParameters: AccountsApiListAccountContactsRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listAccountContacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the accounts of the company.
     * @summary List Accounts
     * @param {AccountsApiListCompanyAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public listCompanyAccounts(requestParameters: AccountsApiListCompanyAccountsRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listCompanyAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a list of contacts from an Account
     * @summary Remove contact from Account
     * @param {AccountsApiRemoveContactFromRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public removeContactFrom(requestParameters: AccountsApiRemoveContactFromRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).removeContactFrom(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an account.
     * @summary Update account
     * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public updateAccount(requestParameters: AccountsApiUpdateAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).updateAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
