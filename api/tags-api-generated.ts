/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContactsListConversationsReverseChronologicalOrderResponse } from '../models';
// @ts-ignore
import { CreateTag } from '../models';
// @ts-ignore
import { TagResponse } from '../models';
// @ts-ignore
import { TagsListCompanyResponse } from '../models';
// @ts-ignore
import { UpdateTag } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a child tag.
         * @summary Create child tag
         * @param {string} tagId The tag ID
         * @param {CreateTag} [createTag] Child Tag to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildTag: async (tagId: string, createTag?: CreateTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('createChildTag', 'tagId', tagId)
            const localVarPath = `/tags/{tag_id}/children`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId !== undefined ? tagId : `-tag_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTag,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{tag_id}/children',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTag, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a company tag.
         * @summary Create company tag
         * @param {CreateTag} [createTag] Tag to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyTag: async (createTag?: CreateTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTag,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/tags',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTag, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
         * @summary Create tag
         * @param {CreateTag} [createTag] Tag to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTagOldestTeam: async (createTag?: CreateTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTag,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTag, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a tag for a team (workspace).
         * @summary Create team tag
         * @param {string} teamId The team ID
         * @param {CreateTag} [createTag] Tag to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamTag: async (teamId: string, createTag?: CreateTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createTeamTag', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/tags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTag,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/tags',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTag, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a tag for a teammate.
         * @summary Create teammate tag
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {CreateTag} [createTag] Tag to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeammateTag: async (teammateId: string, createTag?: CreateTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('createTeammateTag', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/tags`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTag,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/tags',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTag, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a tag.
         * @summary Delete tag
         * @param {string} tagId The ID of the tag to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('deleteTag', 'tagId', tagId)
            const localVarPath = `/tags/{tag_id}`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId !== undefined ? tagId : `-tag_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{tag_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a tag.
         * @summary Get tag
         * @param {string} tagId The tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getTag', 'tagId', tagId)
            const localVarPath = `/tags/{tag_id}`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId !== undefined ? tagId : `-tag_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{tag_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
         * @summary List tags
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the tags. Only supports &#x60;id&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the children of a specific tag.
         * @summary List tag children
         * @param {string} tagId The tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChildren: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('listChildren', 'tagId', tagId)
            const localVarPath = `/tags/{tag_id}/children`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId !== undefined ? tagId : `-tag_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{tag_id}/children',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the company tags.
         * @summary List company tags
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the tags. Only supports &#x60;id&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompany: async (limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List tagged conversations
         * @param {string} tagId The ID of the tag
         * @param {string} [q] [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedConversations: async (tagId: string, q?: string, limit?: number, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('listTaggedConversations', 'tagId', tagId)
            const localVarPath = `/tags/{tag_id}/conversations`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId !== undefined ? tagId : `-tag_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{tag_id}/conversations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the tags for a team (workspace).
         * @summary List team tags
         * @param {string} teamId The team ID
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the tags. Only supports &#x60;id&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamTags: async (teamId: string, limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeamTags', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/tags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the tags for a teammate.
         * @summary List teammate tags
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [sortBy] Field used to sort the tags. Only supports &#x60;id&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateTags: async (teammateId: string, limit?: number, pageToken?: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('listTeammateTags', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/tags`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a tag.
         * @summary Update a tag
         * @param {string} tagId The tag ID
         * @param {UpdateTag} [updateTag] Child Tag to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag: async (tagId: string, updateTag?: UpdateTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('updateTag', 'tagId', tagId)
            const localVarPath = `/tags/{tag_id}`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId !== undefined ? tagId : `-tag_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateTag,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{tag_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateTag, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a child tag.
         * @summary Create child tag
         * @param {TagsApiCreateChildTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChildTag(requestParameters: TagsApiCreateChildTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const createTag: CreateTag = {
                description: requestParameters.description,
                name: requestParameters.name,
                highlight: requestParameters.highlight,
                is_visible_in_conversation_lists: requestParameters.is_visible_in_conversation_lists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChildTag(requestParameters.tagId, createTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a company tag.
         * @summary Create company tag
         * @param {TagsApiCreateCompanyTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompanyTag(requestParameters: TagsApiCreateCompanyTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const createTag: CreateTag = {
                description: requestParameters.description,
                name: requestParameters.name,
                highlight: requestParameters.highlight,
                is_visible_in_conversation_lists: requestParameters.is_visible_in_conversation_lists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompanyTag(createTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
         * @summary Create tag
         * @param {TagsApiCreateTagOldestTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTagOldestTeam(requestParameters: TagsApiCreateTagOldestTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const createTag: CreateTag = {
                description: requestParameters.description,
                name: requestParameters.name,
                highlight: requestParameters.highlight,
                is_visible_in_conversation_lists: requestParameters.is_visible_in_conversation_lists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTagOldestTeam(createTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a tag for a team (workspace).
         * @summary Create team tag
         * @param {TagsApiCreateTeamTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamTag(requestParameters: TagsApiCreateTeamTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const createTag: CreateTag = {
                description: requestParameters.description,
                name: requestParameters.name,
                highlight: requestParameters.highlight,
                is_visible_in_conversation_lists: requestParameters.is_visible_in_conversation_lists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamTag(requestParameters.teamId, createTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a tag for a teammate.
         * @summary Create teammate tag
         * @param {TagsApiCreateTeammateTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeammateTag(requestParameters: TagsApiCreateTeammateTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const createTag: CreateTag = {
                description: requestParameters.description,
                name: requestParameters.name,
                highlight: requestParameters.highlight,
                is_visible_in_conversation_lists: requestParameters.is_visible_in_conversation_lists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeammateTag(requestParameters.teammateId, createTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a tag.
         * @summary Delete tag
         * @param {TagsApiDeleteTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag(requestParameters: TagsApiDeleteTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTag(requestParameters.tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a tag.
         * @summary Get tag
         * @param {TagsApiGetTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTag(requestParameters: TagsApiGetTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTag(requestParameters.tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
         * @summary List tags
         * @param {TagsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: TagsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsListCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the children of a specific tag.
         * @summary List tag children
         * @param {TagsApiListChildrenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChildren(requestParameters: TagsApiListChildrenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsListCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listChildren(requestParameters.tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the company tags.
         * @summary List company tags
         * @param {TagsApiListCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompany(requestParameters: TagsApiListCompanyRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsListCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompany(requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List tagged conversations
         * @param {TagsApiListTaggedConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTaggedConversations(requestParameters: TagsApiListTaggedConversationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTaggedConversations(requestParameters.tagId, requestParameters.q, requestParameters.limit, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the tags for a team (workspace).
         * @summary List team tags
         * @param {TagsApiListTeamTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamTags(requestParameters: TagsApiListTeamTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsListCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamTags(requestParameters.teamId, requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the tags for a teammate.
         * @summary List teammate tags
         * @param {TagsApiListTeammateTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammateTags(requestParameters: TagsApiListTeammateTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsListCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammateTags(requestParameters.teammateId, requestParameters.limit, requestParameters.pageToken, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a tag.
         * @summary Update a tag
         * @param {TagsApiUpdateTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTag(requestParameters: TagsApiUpdateTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateTag: UpdateTag = {
                description: requestParameters.description,
                name: requestParameters.name,
                highlight: requestParameters.highlight,
                parent_tag_id: requestParameters.parent_tag_id,
                is_visible_in_conversation_lists: requestParameters.is_visible_in_conversation_lists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTag(requestParameters.tagId, updateTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * Creates a child tag.
         * @summary Create child tag
         * @param {TagsApiCreateChildTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildTag(requestParameters: TagsApiCreateChildTagRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.createChildTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a company tag.
         * @summary Create company tag
         * @param {TagsApiCreateCompanyTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyTag(requestParameters: TagsApiCreateCompanyTagRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.createCompanyTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
         * @summary Create tag
         * @param {TagsApiCreateTagOldestTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTagOldestTeam(requestParameters: TagsApiCreateTagOldestTeamRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.createTagOldestTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a tag for a team (workspace).
         * @summary Create team tag
         * @param {TagsApiCreateTeamTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamTag(requestParameters: TagsApiCreateTeamTagRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.createTeamTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a tag for a teammate.
         * @summary Create teammate tag
         * @param {TagsApiCreateTeammateTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeammateTag(requestParameters: TagsApiCreateTeammateTagRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.createTeammateTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a tag.
         * @summary Delete tag
         * @param {TagsApiDeleteTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(requestParameters: TagsApiDeleteTagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a tag.
         * @summary Get tag
         * @param {TagsApiGetTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(requestParameters: TagsApiGetTagRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.getTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
         * @summary List tags
         * @param {TagsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: TagsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TagsListCompanyResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the children of a specific tag.
         * @summary List tag children
         * @param {TagsApiListChildrenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChildren(requestParameters: TagsApiListChildrenRequest, options?: AxiosRequestConfig): AxiosPromise<TagsListCompanyResponse> {
            return localVarFp.listChildren(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the company tags.
         * @summary List company tags
         * @param {TagsApiListCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompany(requestParameters: TagsApiListCompanyRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TagsListCompanyResponse> {
            return localVarFp.listCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List tagged conversations
         * @param {TagsApiListTaggedConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedConversations(requestParameters: TagsApiListTaggedConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse> {
            return localVarFp.listTaggedConversations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the tags for a team (workspace).
         * @summary List team tags
         * @param {TagsApiListTeamTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamTags(requestParameters: TagsApiListTeamTagsRequest, options?: AxiosRequestConfig): AxiosPromise<TagsListCompanyResponse> {
            return localVarFp.listTeamTags(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the tags for a teammate.
         * @summary List teammate tags
         * @param {TagsApiListTeammateTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateTags(requestParameters: TagsApiListTeammateTagsRequest, options?: AxiosRequestConfig): AxiosPromise<TagsListCompanyResponse> {
            return localVarFp.listTeammateTags(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a tag.
         * @summary Update a tag
         * @param {TagsApiUpdateTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(requestParameters: TagsApiUpdateTagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTag(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createChildTag operation in TagsApi.
 * @export
 * @interface TagsApiCreateChildTagRequest
 */
export type TagsApiCreateChildTagRequest = {
    
    /**
    * The tag ID
    * @type {string}
    * @memberof TagsApiCreateChildTag
    */
    readonly tagId: string
    
} & CreateTag

/**
 * Request parameters for createCompanyTag operation in TagsApi.
 * @export
 * @interface TagsApiCreateCompanyTagRequest
 */
export type TagsApiCreateCompanyTagRequest = {
    
} & CreateTag

/**
 * Request parameters for createTagOldestTeam operation in TagsApi.
 * @export
 * @interface TagsApiCreateTagOldestTeamRequest
 */
export type TagsApiCreateTagOldestTeamRequest = {
    
} & CreateTag

/**
 * Request parameters for createTeamTag operation in TagsApi.
 * @export
 * @interface TagsApiCreateTeamTagRequest
 */
export type TagsApiCreateTeamTagRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof TagsApiCreateTeamTag
    */
    readonly teamId: string
    
} & CreateTag

/**
 * Request parameters for createTeammateTag operation in TagsApi.
 * @export
 * @interface TagsApiCreateTeammateTagRequest
 */
export type TagsApiCreateTeammateTagRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof TagsApiCreateTeammateTag
    */
    readonly teammateId: string
    
} & CreateTag

/**
 * Request parameters for deleteTag operation in TagsApi.
 * @export
 * @interface TagsApiDeleteTagRequest
 */
export type TagsApiDeleteTagRequest = {
    
    /**
    * The ID of the tag to delete
    * @type {string}
    * @memberof TagsApiDeleteTag
    */
    readonly tagId: string
    
}

/**
 * Request parameters for getTag operation in TagsApi.
 * @export
 * @interface TagsApiGetTagRequest
 */
export type TagsApiGetTagRequest = {
    
    /**
    * The tag ID
    * @type {string}
    * @memberof TagsApiGetTag
    */
    readonly tagId: string
    
}

/**
 * Request parameters for listAll operation in TagsApi.
 * @export
 * @interface TagsApiListAllRequest
 */
export type TagsApiListAllRequest = {
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof TagsApiListAll
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof TagsApiListAll
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the tags. Only supports `id`.
    * @type {string}
    * @memberof TagsApiListAll
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof TagsApiListAll
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listChildren operation in TagsApi.
 * @export
 * @interface TagsApiListChildrenRequest
 */
export type TagsApiListChildrenRequest = {
    
    /**
    * The tag ID
    * @type {string}
    * @memberof TagsApiListChildren
    */
    readonly tagId: string
    
}

/**
 * Request parameters for listCompany operation in TagsApi.
 * @export
 * @interface TagsApiListCompanyRequest
 */
export type TagsApiListCompanyRequest = {
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof TagsApiListCompany
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof TagsApiListCompany
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the tags. Only supports `id`.
    * @type {string}
    * @memberof TagsApiListCompany
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof TagsApiListCompany
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listTaggedConversations operation in TagsApi.
 * @export
 * @interface TagsApiListTaggedConversationsRequest
 */
export type TagsApiListTaggedConversationsRequest = {
    
    /**
    * The ID of the tag
    * @type {string}
    * @memberof TagsApiListTaggedConversations
    */
    readonly tagId: string
    
    /**
    * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
    * @type {string}
    * @memberof TagsApiListTaggedConversations
    */
    readonly q?: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof TagsApiListTaggedConversations
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof TagsApiListTaggedConversations
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for listTeamTags operation in TagsApi.
 * @export
 * @interface TagsApiListTeamTagsRequest
 */
export type TagsApiListTeamTagsRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof TagsApiListTeamTags
    */
    readonly teamId: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof TagsApiListTeamTags
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof TagsApiListTeamTags
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the tags. Only supports `id`.
    * @type {string}
    * @memberof TagsApiListTeamTags
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof TagsApiListTeamTags
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listTeammateTags operation in TagsApi.
 * @export
 * @interface TagsApiListTeammateTagsRequest
 */
export type TagsApiListTeammateTagsRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof TagsApiListTeammateTags
    */
    readonly teammateId: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof TagsApiListTeammateTags
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof TagsApiListTeammateTags
    */
    readonly pageToken?: string
    
    /**
    * Field used to sort the tags. Only supports `id`.
    * @type {string}
    * @memberof TagsApiListTeammateTags
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof TagsApiListTeammateTags
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for updateTag operation in TagsApi.
 * @export
 * @interface TagsApiUpdateTagRequest
 */
export type TagsApiUpdateTagRequest = {
    
    /**
    * The tag ID
    * @type {string}
    * @memberof TagsApiUpdateTag
    */
    readonly tagId: string
    
} & UpdateTag

/**
 * TagsApiGenerated - object-oriented interface
 * @export
 * @class TagsApiGenerated
 * @extends {BaseAPI}
 */
export class TagsApiGenerated extends BaseAPI {
    /**
     * Creates a child tag.
     * @summary Create child tag
     * @param {TagsApiCreateChildTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public createChildTag(requestParameters: TagsApiCreateChildTagRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).createChildTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a company tag.
     * @summary Create company tag
     * @param {TagsApiCreateCompanyTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public createCompanyTag(requestParameters: TagsApiCreateCompanyTagRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).createCompanyTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
     * @summary Create tag
     * @param {TagsApiCreateTagOldestTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public createTagOldestTeam(requestParameters: TagsApiCreateTagOldestTeamRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).createTagOldestTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a tag for a team (workspace).
     * @summary Create team tag
     * @param {TagsApiCreateTeamTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public createTeamTag(requestParameters: TagsApiCreateTeamTagRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).createTeamTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a tag for a teammate.
     * @summary Create teammate tag
     * @param {TagsApiCreateTeammateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public createTeammateTag(requestParameters: TagsApiCreateTeammateTagRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).createTeammateTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a tag.
     * @summary Delete tag
     * @param {TagsApiDeleteTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public deleteTag(requestParameters: TagsApiDeleteTagRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).deleteTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a tag.
     * @summary Get tag
     * @param {TagsApiGetTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public getTag(requestParameters: TagsApiGetTagRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
     * @summary List tags
     * @param {TagsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public listAll(requestParameters: TagsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the children of a specific tag.
     * @summary List tag children
     * @param {TagsApiListChildrenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public listChildren(requestParameters: TagsApiListChildrenRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).listChildren(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the company tags.
     * @summary List company tags
     * @param {TagsApiListCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public listCompany(requestParameters: TagsApiListCompanyRequest = {}, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).listCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @summary List tagged conversations
     * @param {TagsApiListTaggedConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public listTaggedConversations(requestParameters: TagsApiListTaggedConversationsRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).listTaggedConversations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the tags for a team (workspace).
     * @summary List team tags
     * @param {TagsApiListTeamTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public listTeamTags(requestParameters: TagsApiListTeamTagsRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).listTeamTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the tags for a teammate.
     * @summary List teammate tags
     * @param {TagsApiListTeammateTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public listTeammateTags(requestParameters: TagsApiListTeammateTagsRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).listTeammateTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a tag.
     * @summary Update a tag
     * @param {TagsApiUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiGenerated
     */
    public updateTag(requestParameters: TagsApiUpdateTagRequest, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).updateTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
