/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
export const AttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Download an attachment file.
         * @summary Download attachment
         * @param {string} attachmentLinkId The Attachment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachmentFile: async (attachmentLinkId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attachmentLinkId' is not null or undefined
            assertParamExists('downloadAttachmentFile', 'attachmentLinkId', attachmentLinkId)
            const localVarPath = `/download/{attachment_link_id}`
                .replace(`{${"attachment_link_id"}}`, encodeURIComponent(String(attachmentLinkId !== undefined ? attachmentLinkId : `-attachment_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/download/{attachment_link_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentsApi - functional programming interface
 * @export
 */
export const AttachmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Download an attachment file.
         * @summary Download attachment
         * @param {AttachmentsApiDownloadAttachmentFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadAttachmentFile(requestParameters: AttachmentsApiDownloadAttachmentFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadAttachmentFile(requestParameters.attachmentLinkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttachmentsApi - factory interface
 * @export
 */
export const AttachmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentsApiFp(configuration)
    return {
        /**
         * Download an attachment file.
         * @summary Download attachment
         * @param {AttachmentsApiDownloadAttachmentFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachmentFile(requestParameters: AttachmentsApiDownloadAttachmentFileRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.downloadAttachmentFile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadAttachmentFile operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiDownloadAttachmentFileRequest
 */
export type AttachmentsApiDownloadAttachmentFileRequest = {
    
    /**
    * The Attachment ID
    * @type {string}
    * @memberof AttachmentsApiDownloadAttachmentFile
    */
    readonly attachmentLinkId: string
    
}

/**
 * AttachmentsApiGenerated - object-oriented interface
 * @export
 * @class AttachmentsApiGenerated
 * @extends {BaseAPI}
 */
export class AttachmentsApiGenerated extends BaseAPI {
    /**
     * Download an attachment file.
     * @summary Download attachment
     * @param {AttachmentsApiDownloadAttachmentFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApiGenerated
     */
    public downloadAttachmentFile(requestParameters: AttachmentsApiDownloadAttachmentFileRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).downloadAttachmentFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
