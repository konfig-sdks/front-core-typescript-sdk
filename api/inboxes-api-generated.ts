/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChannelsListResponse } from '../models';
// @ts-ignore
import { CommentsListMentionedTeammatesResponse } from '../models';
// @ts-ignore
import { ContactsListConversationsReverseChronologicalOrderResponse } from '../models';
// @ts-ignore
import { ConversationsListInboxesResponse } from '../models';
// @ts-ignore
import { CreateInbox } from '../models';
// @ts-ignore
import { TeammateIds } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InboxesApi - axios parameter creator
 * @export
 */
export const InboxesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Give access to one or more teammates to an inbox.
         * @summary Add inbox access
         * @param {string} inboxId The Inbox ID
         * @param {TeammateIds} [teammateIds] Teammate IDs to add. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeammateAccess: async (inboxId: string, teammateIds?: TeammateIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboxId' is not null or undefined
            assertParamExists('addTeammateAccess', 'inboxId', inboxId)
            const localVarPath = `/inboxes/{inbox_id}/teammates`
                .replace(`{${"inbox_id"}}`, encodeURIComponent(String(inboxId !== undefined ? inboxId : `-inbox_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teammateIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes/{inbox_id}/teammates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teammateIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
         * @summary Create inbox
         * @param {CreateInbox} [createInbox] Inbox details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultTeamInbox: async (createInbox?: CreateInbox, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inboxes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createInbox,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createInbox, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an inbox for a team (workspace).
         * @summary Create team inbox
         * @param {string} teamId The team ID
         * @param {CreateInbox} [createInbox] Inbox details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamInbox: async (teamId: string, createInbox?: CreateInbox, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createTeamInbox', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/inboxes`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createInbox,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/inboxes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createInbox, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch an inbox.
         * @summary Get inbox
         * @param {string} inboxId The Inbox ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbox: async (inboxId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboxId' is not null or undefined
            assertParamExists('getInbox', 'inboxId', inboxId)
            const localVarPath = `/inboxes/{inbox_id}`
                .replace(`{${"inbox_id"}}`, encodeURIComponent(String(inboxId !== undefined ? inboxId : `-inbox_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes/{inbox_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the channels in an inbox.
         * @summary List inbox channels
         * @param {string} inboxId The Inbox ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChannels: async (inboxId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboxId' is not null or undefined
            assertParamExists('listChannels', 'inboxId', inboxId)
            const localVarPath = `/inboxes/{inbox_id}/channels`
                .replace(`{${"inbox_id"}}`, encodeURIComponent(String(inboxId !== undefined ? inboxId : `-inbox_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes/{inbox_id}/channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List inbox conversations
         * @param {string} inboxId The Inbox ID
         * @param {string} [q] [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
         * @param {number} [limit] Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         * @param {string} [pageToken] Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversationsInbox: async (inboxId: string, q?: string, limit?: number, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboxId' is not null or undefined
            assertParamExists('listConversationsInbox', 'inboxId', inboxId)
            const localVarPath = `/inboxes/{inbox_id}/conversations`
                .replace(`{${"inbox_id"}}`, encodeURIComponent(String(inboxId !== undefined ? inboxId : `-inbox_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes/{inbox_id}/conversations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the inboxes of the company.
         * @summary List inboxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboxes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inboxes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the inboxes belonging to a team (workspace).
         * @summary List team inboxes
         * @param {string} teamId The team ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamInboxes: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeamInboxes', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/inboxes`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/inboxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the teammates with access to an inbox.
         * @summary List inbox access
         * @param {string} inboxId The Inbox ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammatesAccess: async (inboxId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboxId' is not null or undefined
            assertParamExists('listTeammatesAccess', 'inboxId', inboxId)
            const localVarPath = `/inboxes/{inbox_id}/teammates`
                .replace(`{${"inbox_id"}}`, encodeURIComponent(String(inboxId !== undefined ? inboxId : `-inbox_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes/{inbox_id}/teammates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove access of one or more teammates from an inbox.
         * @summary Removes inbox access
         * @param {string} inboxId The Inbox ID
         * @param {TeammateIds} [teammateIds] Teammate IDs to remove. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccess: async (inboxId: string, teammateIds?: TeammateIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboxId' is not null or undefined
            assertParamExists('removeAccess', 'inboxId', inboxId)
            const localVarPath = `/inboxes/{inbox_id}/teammates`
                .replace(`{${"inbox_id"}}`, encodeURIComponent(String(inboxId !== undefined ? inboxId : `-inbox_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teammateIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inboxes/{inbox_id}/teammates',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teammateIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InboxesApi - functional programming interface
 * @export
 */
export const InboxesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InboxesApiAxiosParamCreator(configuration)
    return {
        /**
         * Give access to one or more teammates to an inbox.
         * @summary Add inbox access
         * @param {InboxesApiAddTeammateAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTeammateAccess(requestParameters: InboxesApiAddTeammateAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const teammateIds: TeammateIds = {
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeammateAccess(requestParameters.inboxId, teammateIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
         * @summary Create inbox
         * @param {InboxesApiCreateDefaultTeamInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDefaultTeamInbox(requestParameters: InboxesApiCreateDefaultTeamInboxRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const createInbox: CreateInbox = {
                name: requestParameters.name,
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDefaultTeamInbox(createInbox, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an inbox for a team (workspace).
         * @summary Create team inbox
         * @param {InboxesApiCreateTeamInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamInbox(requestParameters: InboxesApiCreateTeamInboxRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const createInbox: CreateInbox = {
                name: requestParameters.name,
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamInbox(requestParameters.teamId, createInbox, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch an inbox.
         * @summary Get inbox
         * @param {InboxesApiGetInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInbox(requestParameters: InboxesApiGetInboxRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInbox(requestParameters.inboxId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the channels in an inbox.
         * @summary List inbox channels
         * @param {InboxesApiListChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChannels(requestParameters: InboxesApiListChannelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listChannels(requestParameters.inboxId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List inbox conversations
         * @param {InboxesApiListConversationsInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConversationsInbox(requestParameters: InboxesApiListConversationsInboxRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversationsInbox(requestParameters.inboxId, requestParameters.q, requestParameters.limit, requestParameters.pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the inboxes of the company.
         * @summary List inboxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboxes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsListInboxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboxes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the inboxes belonging to a team (workspace).
         * @summary List team inboxes
         * @param {InboxesApiListTeamInboxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamInboxes(requestParameters: InboxesApiListTeamInboxesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsListInboxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamInboxes(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the teammates with access to an inbox.
         * @summary List inbox access
         * @param {InboxesApiListTeammatesAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammatesAccess(requestParameters: InboxesApiListTeammatesAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsListMentionedTeammatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammatesAccess(requestParameters.inboxId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove access of one or more teammates from an inbox.
         * @summary Removes inbox access
         * @param {InboxesApiRemoveAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAccess(requestParameters: InboxesApiRemoveAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const teammateIds: TeammateIds = {
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAccess(requestParameters.inboxId, teammateIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InboxesApi - factory interface
 * @export
 */
export const InboxesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InboxesApiFp(configuration)
    return {
        /**
         * Give access to one or more teammates to an inbox.
         * @summary Add inbox access
         * @param {InboxesApiAddTeammateAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeammateAccess(requestParameters: InboxesApiAddTeammateAccessRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addTeammateAccess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
         * @summary Create inbox
         * @param {InboxesApiCreateDefaultTeamInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultTeamInbox(requestParameters: InboxesApiCreateDefaultTeamInboxRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createDefaultTeamInbox(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an inbox for a team (workspace).
         * @summary Create team inbox
         * @param {InboxesApiCreateTeamInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamInbox(requestParameters: InboxesApiCreateTeamInboxRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTeamInbox(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch an inbox.
         * @summary Get inbox
         * @param {InboxesApiGetInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbox(requestParameters: InboxesApiGetInboxRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getInbox(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the channels in an inbox.
         * @summary List inbox channels
         * @param {InboxesApiListChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChannels(requestParameters: InboxesApiListChannelsRequest, options?: AxiosRequestConfig): AxiosPromise<ChannelsListResponse> {
            return localVarFp.listChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
         * @summary List inbox conversations
         * @param {InboxesApiListConversationsInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConversationsInbox(requestParameters: InboxesApiListConversationsInboxRequest, options?: AxiosRequestConfig): AxiosPromise<ContactsListConversationsReverseChronologicalOrderResponse> {
            return localVarFp.listConversationsInbox(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the inboxes of the company.
         * @summary List inboxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboxes(options?: AxiosRequestConfig): AxiosPromise<ConversationsListInboxesResponse> {
            return localVarFp.listInboxes(options).then((request) => request(axios, basePath));
        },
        /**
         * List the inboxes belonging to a team (workspace).
         * @summary List team inboxes
         * @param {InboxesApiListTeamInboxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamInboxes(requestParameters: InboxesApiListTeamInboxesRequest, options?: AxiosRequestConfig): AxiosPromise<ConversationsListInboxesResponse> {
            return localVarFp.listTeamInboxes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the teammates with access to an inbox.
         * @summary List inbox access
         * @param {InboxesApiListTeammatesAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammatesAccess(requestParameters: InboxesApiListTeammatesAccessRequest, options?: AxiosRequestConfig): AxiosPromise<CommentsListMentionedTeammatesResponse> {
            return localVarFp.listTeammatesAccess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove access of one or more teammates from an inbox.
         * @summary Removes inbox access
         * @param {InboxesApiRemoveAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccess(requestParameters: InboxesApiRemoveAccessRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAccess(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTeammateAccess operation in InboxesApi.
 * @export
 * @interface InboxesApiAddTeammateAccessRequest
 */
export type InboxesApiAddTeammateAccessRequest = {
    
    /**
    * The Inbox ID
    * @type {string}
    * @memberof InboxesApiAddTeammateAccess
    */
    readonly inboxId: string
    
} & TeammateIds

/**
 * Request parameters for createDefaultTeamInbox operation in InboxesApi.
 * @export
 * @interface InboxesApiCreateDefaultTeamInboxRequest
 */
export type InboxesApiCreateDefaultTeamInboxRequest = {
    
} & CreateInbox

/**
 * Request parameters for createTeamInbox operation in InboxesApi.
 * @export
 * @interface InboxesApiCreateTeamInboxRequest
 */
export type InboxesApiCreateTeamInboxRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof InboxesApiCreateTeamInbox
    */
    readonly teamId: string
    
} & CreateInbox

/**
 * Request parameters for getInbox operation in InboxesApi.
 * @export
 * @interface InboxesApiGetInboxRequest
 */
export type InboxesApiGetInboxRequest = {
    
    /**
    * The Inbox ID
    * @type {string}
    * @memberof InboxesApiGetInbox
    */
    readonly inboxId: string
    
}

/**
 * Request parameters for listChannels operation in InboxesApi.
 * @export
 * @interface InboxesApiListChannelsRequest
 */
export type InboxesApiListChannelsRequest = {
    
    /**
    * The Inbox ID
    * @type {string}
    * @memberof InboxesApiListChannels
    */
    readonly inboxId: string
    
}

/**
 * Request parameters for listConversationsInbox operation in InboxesApi.
 * @export
 * @interface InboxesApiListConversationsInboxRequest
 */
export type InboxesApiListConversationsInboxRequest = {
    
    /**
    * The Inbox ID
    * @type {string}
    * @memberof InboxesApiListConversationsInbox
    */
    readonly inboxId: string
    
    /**
    * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `deleted`).
    * @type {string}
    * @memberof InboxesApiListConversationsInbox
    */
    readonly q?: string
    
    /**
    * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    * @type {number}
    * @memberof InboxesApiListConversationsInbox
    */
    readonly limit?: number
    
    /**
    * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    * @type {string}
    * @memberof InboxesApiListConversationsInbox
    */
    readonly pageToken?: string
    
}

/**
 * Request parameters for listTeamInboxes operation in InboxesApi.
 * @export
 * @interface InboxesApiListTeamInboxesRequest
 */
export type InboxesApiListTeamInboxesRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof InboxesApiListTeamInboxes
    */
    readonly teamId: string
    
}

/**
 * Request parameters for listTeammatesAccess operation in InboxesApi.
 * @export
 * @interface InboxesApiListTeammatesAccessRequest
 */
export type InboxesApiListTeammatesAccessRequest = {
    
    /**
    * The Inbox ID
    * @type {string}
    * @memberof InboxesApiListTeammatesAccess
    */
    readonly inboxId: string
    
}

/**
 * Request parameters for removeAccess operation in InboxesApi.
 * @export
 * @interface InboxesApiRemoveAccessRequest
 */
export type InboxesApiRemoveAccessRequest = {
    
    /**
    * The Inbox ID
    * @type {string}
    * @memberof InboxesApiRemoveAccess
    */
    readonly inboxId: string
    
} & TeammateIds

/**
 * InboxesApiGenerated - object-oriented interface
 * @export
 * @class InboxesApiGenerated
 * @extends {BaseAPI}
 */
export class InboxesApiGenerated extends BaseAPI {
    /**
     * Give access to one or more teammates to an inbox.
     * @summary Add inbox access
     * @param {InboxesApiAddTeammateAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public addTeammateAccess(requestParameters: InboxesApiAddTeammateAccessRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).addTeammateAccess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
     * @summary Create inbox
     * @param {InboxesApiCreateDefaultTeamInboxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public createDefaultTeamInbox(requestParameters: InboxesApiCreateDefaultTeamInboxRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).createDefaultTeamInbox(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an inbox for a team (workspace).
     * @summary Create team inbox
     * @param {InboxesApiCreateTeamInboxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public createTeamInbox(requestParameters: InboxesApiCreateTeamInboxRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).createTeamInbox(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch an inbox.
     * @summary Get inbox
     * @param {InboxesApiGetInboxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public getInbox(requestParameters: InboxesApiGetInboxRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).getInbox(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the channels in an inbox.
     * @summary List inbox channels
     * @param {InboxesApiListChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public listChannels(requestParameters: InboxesApiListChannelsRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).listChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @summary List inbox conversations
     * @param {InboxesApiListConversationsInboxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public listConversationsInbox(requestParameters: InboxesApiListConversationsInboxRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).listConversationsInbox(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the inboxes of the company.
     * @summary List inboxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public listInboxes(options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).listInboxes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the inboxes belonging to a team (workspace).
     * @summary List team inboxes
     * @param {InboxesApiListTeamInboxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public listTeamInboxes(requestParameters: InboxesApiListTeamInboxesRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).listTeamInboxes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the teammates with access to an inbox.
     * @summary List inbox access
     * @param {InboxesApiListTeammatesAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public listTeammatesAccess(requestParameters: InboxesApiListTeammatesAccessRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).listTeammatesAccess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove access of one or more teammates from an inbox.
     * @summary Removes inbox access
     * @param {InboxesApiRemoveAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxesApiGenerated
     */
    public removeAccess(requestParameters: InboxesApiRemoveAccessRequest, options?: AxiosRequestConfig) {
        return InboxesApiFp(this.configuration).removeAccess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
