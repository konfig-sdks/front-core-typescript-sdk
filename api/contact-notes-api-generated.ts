/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContactNoteResponses } from '../models';
// @ts-ignore
import { ContactNotesListResponse } from '../models';
// @ts-ignore
import { CreateContactNote } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContactNotesApi - axios parameter creator
 * @export
 */
export const ContactNotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new note on a contact.
         * @summary Add note
         * @param {string} contactId The contact ID. Alternatively, you can supply the contact\&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {CreateContactNote} [createContactNote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewNote: async (contactId: string, createContactNote?: CreateContactNote, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('createNewNote', 'contactId', contactId)
            const localVarPath = `/contacts/{contact_id}/notes`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId !== undefined ? contactId : `-contact_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createContactNote,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{contact_id}/notes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createContactNote, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the notes added to a contact.
         * @summary List notes
         * @param {string} contactId The contact ID. Alternatively, you can supply the contact\&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('list', 'contactId', contactId)
            const localVarPath = `/contacts/{contact_id}/notes`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId !== undefined ? contactId : `-contact_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contacts/{contact_id}/notes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactNotesApi - functional programming interface
 * @export
 */
export const ContactNotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactNotesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new note on a contact.
         * @summary Add note
         * @param {ContactNotesApiCreateNewNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewNote(requestParameters: ContactNotesApiCreateNewNoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactNoteResponses>> {
            const createContactNote: CreateContactNote = {
                author_id: requestParameters.author_id,
                body: requestParameters.body
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewNote(requestParameters.contactId, createContactNote, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the notes added to a contact.
         * @summary List notes
         * @param {ContactNotesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ContactNotesApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactNotesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactNotesApi - factory interface
 * @export
 */
export const ContactNotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactNotesApiFp(configuration)
    return {
        /**
         * Create a new note on a contact.
         * @summary Add note
         * @param {ContactNotesApiCreateNewNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewNote(requestParameters: ContactNotesApiCreateNewNoteRequest, options?: AxiosRequestConfig): AxiosPromise<ContactNoteResponses> {
            return localVarFp.createNewNote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the notes added to a contact.
         * @summary List notes
         * @param {ContactNotesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ContactNotesApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ContactNotesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewNote operation in ContactNotesApi.
 * @export
 * @interface ContactNotesApiCreateNewNoteRequest
 */
export type ContactNotesApiCreateNewNoteRequest = {
    
    /**
    * The contact ID. Alternatively, you can supply the contact\'s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof ContactNotesApiCreateNewNote
    */
    readonly contactId: string
    
} & CreateContactNote

/**
 * Request parameters for list operation in ContactNotesApi.
 * @export
 * @interface ContactNotesApiListRequest
 */
export type ContactNotesApiListRequest = {
    
    /**
    * The contact ID. Alternatively, you can supply the contact\'s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof ContactNotesApiList
    */
    readonly contactId: string
    
}

/**
 * ContactNotesApiGenerated - object-oriented interface
 * @export
 * @class ContactNotesApiGenerated
 * @extends {BaseAPI}
 */
export class ContactNotesApiGenerated extends BaseAPI {
    /**
     * Create a new note on a contact.
     * @summary Add note
     * @param {ContactNotesApiCreateNewNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactNotesApiGenerated
     */
    public createNewNote(requestParameters: ContactNotesApiCreateNewNoteRequest, options?: AxiosRequestConfig) {
        return ContactNotesApiFp(this.configuration).createNewNote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the notes added to a contact.
     * @summary List notes
     * @param {ContactNotesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactNotesApiGenerated
     */
    public list(requestParameters: ContactNotesApiListRequest, options?: AxiosRequestConfig) {
        return ContactNotesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
