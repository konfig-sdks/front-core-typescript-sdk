/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TeammateIds } from '../models';
// @ts-ignore
import { TeamsListTeamsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more teammates to a team (workspace).
         * @summary Add teammates to team
         * @param {string} teamId The Team ID
         * @param {TeammateIds} [teammateIds] Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeammates: async (teamId: string, teammateIds?: TeammateIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addTeammates', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/teammates`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teammateIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/teammates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teammateIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a team (workspace).
         * @summary Get team
         * @param {string} teamId The Team ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getWorkspace', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the teams (workspaces) in the company.
         * @summary List teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more teammates from a team (workspace). Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @summary Remove teammates from team
         * @param {string} teamId The Team ID
         * @param {TeammateIds} [teammateIds] Teammate IDs to remove from the team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeammates: async (teamId: string, teammateIds?: TeammateIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeTeammates', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/teammates`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teammateIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/teammates',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teammateIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add one or more teammates to a team (workspace).
         * @summary Add teammates to team
         * @param {TeamsApiAddTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTeammates(requestParameters: TeamsApiAddTeammatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const teammateIds: TeammateIds = {
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeammates(requestParameters.teamId, teammateIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a team (workspace).
         * @summary Get team
         * @param {TeamsApiGetWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspace(requestParameters: TeamsApiGetWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspace(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the teams (workspaces) in the company.
         * @summary List teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsListTeamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more teammates from a team (workspace). Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @summary Remove teammates from team
         * @param {TeamsApiRemoveTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTeammates(requestParameters: TeamsApiRemoveTeammatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const teammateIds: TeammateIds = {
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTeammates(requestParameters.teamId, teammateIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * Add one or more teammates to a team (workspace).
         * @summary Add teammates to team
         * @param {TeamsApiAddTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeammates(requestParameters: TeamsApiAddTeammatesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addTeammates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a team (workspace).
         * @summary Get team
         * @param {TeamsApiGetWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace(requestParameters: TeamsApiGetWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the teams (workspaces) in the company.
         * @summary List teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeams(options?: AxiosRequestConfig): AxiosPromise<TeamsListTeamsResponse> {
            return localVarFp.listTeams(options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more teammates from a team (workspace). Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @summary Remove teammates from team
         * @param {TeamsApiRemoveTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeammates(requestParameters: TeamsApiRemoveTeammatesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeTeammates(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTeammates operation in TeamsApi.
 * @export
 * @interface TeamsApiAddTeammatesRequest
 */
export type TeamsApiAddTeammatesRequest = {
    
    /**
    * The Team ID
    * @type {string}
    * @memberof TeamsApiAddTeammates
    */
    readonly teamId: string
    
} & TeammateIds

/**
 * Request parameters for getWorkspace operation in TeamsApi.
 * @export
 * @interface TeamsApiGetWorkspaceRequest
 */
export type TeamsApiGetWorkspaceRequest = {
    
    /**
    * The Team ID
    * @type {string}
    * @memberof TeamsApiGetWorkspace
    */
    readonly teamId: string
    
}

/**
 * Request parameters for removeTeammates operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveTeammatesRequest
 */
export type TeamsApiRemoveTeammatesRequest = {
    
    /**
    * The Team ID
    * @type {string}
    * @memberof TeamsApiRemoveTeammates
    */
    readonly teamId: string
    
} & TeammateIds

/**
 * TeamsApiGenerated - object-oriented interface
 * @export
 * @class TeamsApiGenerated
 * @extends {BaseAPI}
 */
export class TeamsApiGenerated extends BaseAPI {
    /**
     * Add one or more teammates to a team (workspace).
     * @summary Add teammates to team
     * @param {TeamsApiAddTeammatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public addTeammates(requestParameters: TeamsApiAddTeammatesRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addTeammates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a team (workspace).
     * @summary Get team
     * @param {TeamsApiGetWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getWorkspace(requestParameters: TeamsApiGetWorkspaceRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the teams (workspaces) in the company.
     * @summary List teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public listTeams(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more teammates from a team (workspace). Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     * @summary Remove teammates from team
     * @param {TeamsApiRemoveTeammatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public removeTeammates(requestParameters: TeamsApiRemoveTeammatesRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeTeammates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
