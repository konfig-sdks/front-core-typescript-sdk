/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateMessageTemplateFolder } from '../models';
// @ts-ignore
import { CreateMessageTemplateFolderAsChild } from '../models';
// @ts-ignore
import { MessageTemplateFoldersDeleteFolderResponse } from '../models';
// @ts-ignore
import { MessageTemplateFoldersListFoldersResponse } from '../models';
// @ts-ignore
import { UpdateMessageTemplateFolder } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MessageTemplateFoldersApi - axios parameter creator
 * @export
 */
export const MessageTemplateFoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new message template folder as a child of the given folder
         * @summary Create child folder
         * @param {string} messageTemplateFolderId The parent message template folder ID
         * @param {CreateMessageTemplateFolderAsChild} [createMessageTemplateFolderAsChild] Message template folder to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildFolder: async (messageTemplateFolderId: string, createMessageTemplateFolderAsChild?: CreateMessageTemplateFolderAsChild, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateFolderId' is not null or undefined
            assertParamExists('createChildFolder', 'messageTemplateFolderId', messageTemplateFolderId)
            const localVarPath = `/message_template_folders/{message_template_folder_id}/message_template_folders`
                .replace(`{${"message_template_folder_id"}}`, encodeURIComponent(String(messageTemplateFolderId !== undefined ? messageTemplateFolderId : `-message_template_folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMessageTemplateFolderAsChild,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders/{message_template_folder_id}/message_template_folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageTemplateFolderAsChild, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message template folder.
         * @summary Create folder
         * @param {CreateMessageTemplateFolder} [createMessageTemplateFolder] Message template folder to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFolder: async (createMessageTemplateFolder?: CreateMessageTemplateFolder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/message_template_folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMessageTemplateFolder,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageTemplateFolder, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message template folder belonging to the requested teammate.
         * @summary Create teammate folder
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {CreateMessageTemplateFolder} [createMessageTemplateFolder] Message template folder to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFolder_1: async (teammateId: string, createMessageTemplateFolder?: CreateMessageTemplateFolder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('createNewFolder_1', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/message_template_folders`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMessageTemplateFolder,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/message_template_folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageTemplateFolder, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message template folder belonging to the requested team (workspace).
         * @summary Create team folder
         * @param {string} teamId The team ID
         * @param {CreateMessageTemplateFolder} [createMessageTemplateFolder] Message template folder to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFolder_2: async (teamId: string, createMessageTemplateFolder?: CreateMessageTemplateFolder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createNewFolder_2', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/message_template_folders`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMessageTemplateFolder,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/message_template_folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageTemplateFolder, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a message template folder and child folders/templates
         * @summary Delete folder
         * @param {string} messageTemplateFolderId The message template folder id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder: async (messageTemplateFolderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateFolderId' is not null or undefined
            assertParamExists('deleteFolder', 'messageTemplateFolderId', messageTemplateFolderId)
            const localVarPath = `/message_template_folders/{message_template_folder_id}`
                .replace(`{${"message_template_folder_id"}}`, encodeURIComponent(String(messageTemplateFolderId !== undefined ? messageTemplateFolderId : `-message_template_folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders/{message_template_folder_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the child message templates folders of a message template folder.
         * @summary Get child folders
         * @param {string} messageTemplateFolderId The message template folder ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildFolders: async (messageTemplateFolderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateFolderId' is not null or undefined
            assertParamExists('getChildFolders', 'messageTemplateFolderId', messageTemplateFolderId)
            const localVarPath = `/message_template_folders/{message_template_folder_id}/message_template_folders`
                .replace(`{${"message_template_folder_id"}}`, encodeURIComponent(String(messageTemplateFolderId !== undefined ? messageTemplateFolderId : `-message_template_folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders/{message_template_folder_id}/message_template_folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a message template folder.
         * @summary Get folder
         * @param {string} messageTemplateFolderId The message template folder ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder: async (messageTemplateFolderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateFolderId' is not null or undefined
            assertParamExists('getFolder', 'messageTemplateFolderId', messageTemplateFolderId)
            const localVarPath = `/message_template_folders/{message_template_folder_id}`
                .replace(`{${"message_template_folder_id"}}`, encodeURIComponent(String(messageTemplateFolderId !== undefined ? messageTemplateFolderId : `-message_template_folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders/{message_template_folder_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the message template folders.
         * @summary List folders
         * @param {string} [sortBy] Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders: async (sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/message_template_folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the message template folders belonging to the requested team (workspace).
         * @summary List team folders
         * @param {string} teamId The team ID
         * @param {string} [sortBy] Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamFolders: async (teamId: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeamFolders', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/message_template_folders`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/message_template_folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the message template folders belonging to the requested teammate.
         * @summary List teammate folders
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {string} [sortBy] Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateFolders: async (teammateId: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('listTeammateFolders', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/message_template_folders`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/message_template_folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update message template folder
         * @summary Update folder
         * @param {string} messageTemplateFolderId The message template folder ID
         * @param {UpdateMessageTemplateFolder} [updateMessageTemplateFolder] Message template folder to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolder: async (messageTemplateFolderId: string, updateMessageTemplateFolder?: UpdateMessageTemplateFolder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateFolderId' is not null or undefined
            assertParamExists('updateFolder', 'messageTemplateFolderId', messageTemplateFolderId)
            const localVarPath = `/message_template_folders/{message_template_folder_id}`
                .replace(`{${"message_template_folder_id"}}`, encodeURIComponent(String(messageTemplateFolderId !== undefined ? messageTemplateFolderId : `-message_template_folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateMessageTemplateFolder,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders/{message_template_folder_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateMessageTemplateFolder, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageTemplateFoldersApi - functional programming interface
 * @export
 */
export const MessageTemplateFoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageTemplateFoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new message template folder as a child of the given folder
         * @summary Create child folder
         * @param {MessageTemplateFoldersApiCreateChildFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChildFolder(requestParameters: MessageTemplateFoldersApiCreateChildFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createMessageTemplateFolderAsChild: CreateMessageTemplateFolderAsChild = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChildFolder(requestParameters.messageTemplateFolderId, createMessageTemplateFolderAsChild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message template folder.
         * @summary Create folder
         * @param {MessageTemplateFoldersApiCreateNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFolder(requestParameters: MessageTemplateFoldersApiCreateNewFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createMessageTemplateFolder: CreateMessageTemplateFolder = {
                name: requestParameters.name,
                parent_folder_id: requestParameters.parent_folder_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFolder(createMessageTemplateFolder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message template folder belonging to the requested teammate.
         * @summary Create teammate folder
         * @param {MessageTemplateFoldersApiCreateNewFolder0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFolder_1(requestParameters: MessageTemplateFoldersApiCreateNewFolder0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createMessageTemplateFolder: CreateMessageTemplateFolder = {
                name: requestParameters.name,
                parent_folder_id: requestParameters.parent_folder_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFolder_1(requestParameters.teammateId, createMessageTemplateFolder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message template folder belonging to the requested team (workspace).
         * @summary Create team folder
         * @param {MessageTemplateFoldersApiCreateNewFolder1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFolder_2(requestParameters: MessageTemplateFoldersApiCreateNewFolder1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createMessageTemplateFolder: CreateMessageTemplateFolder = {
                name: requestParameters.name,
                parent_folder_id: requestParameters.parent_folder_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFolder_2(requestParameters.teamId, createMessageTemplateFolder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a message template folder and child folders/templates
         * @summary Delete folder
         * @param {MessageTemplateFoldersApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolder(requestParameters: MessageTemplateFoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateFoldersDeleteFolderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolder(requestParameters.messageTemplateFolderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the child message templates folders of a message template folder.
         * @summary Get child folders
         * @param {MessageTemplateFoldersApiGetChildFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChildFolders(requestParameters: MessageTemplateFoldersApiGetChildFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateFoldersListFoldersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChildFolders(requestParameters.messageTemplateFolderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a message template folder.
         * @summary Get folder
         * @param {MessageTemplateFoldersApiGetFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolder(requestParameters: MessageTemplateFoldersApiGetFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolder(requestParameters.messageTemplateFolderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the message template folders.
         * @summary List folders
         * @param {MessageTemplateFoldersApiListFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFolders(requestParameters: MessageTemplateFoldersApiListFoldersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateFoldersListFoldersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFolders(requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the message template folders belonging to the requested team (workspace).
         * @summary List team folders
         * @param {MessageTemplateFoldersApiListTeamFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamFolders(requestParameters: MessageTemplateFoldersApiListTeamFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateFoldersListFoldersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamFolders(requestParameters.teamId, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the message template folders belonging to the requested teammate.
         * @summary List teammate folders
         * @param {MessageTemplateFoldersApiListTeammateFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammateFolders(requestParameters: MessageTemplateFoldersApiListTeammateFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateFoldersListFoldersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammateFolders(requestParameters.teammateId, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update message template folder
         * @summary Update folder
         * @param {MessageTemplateFoldersApiUpdateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFolder(requestParameters: MessageTemplateFoldersApiUpdateFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const updateMessageTemplateFolder: UpdateMessageTemplateFolder = {
                name: requestParameters.name,
                parent_folder_id: requestParameters.parent_folder_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFolder(requestParameters.messageTemplateFolderId, updateMessageTemplateFolder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageTemplateFoldersApi - factory interface
 * @export
 */
export const MessageTemplateFoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageTemplateFoldersApiFp(configuration)
    return {
        /**
         * Create a new message template folder as a child of the given folder
         * @summary Create child folder
         * @param {MessageTemplateFoldersApiCreateChildFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildFolder(requestParameters: MessageTemplateFoldersApiCreateChildFolderRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createChildFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message template folder.
         * @summary Create folder
         * @param {MessageTemplateFoldersApiCreateNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFolder(requestParameters: MessageTemplateFoldersApiCreateNewFolderRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message template folder belonging to the requested teammate.
         * @summary Create teammate folder
         * @param {MessageTemplateFoldersApiCreateNewFolder0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFolder_1(requestParameters: MessageTemplateFoldersApiCreateNewFolder0Request, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewFolder_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message template folder belonging to the requested team (workspace).
         * @summary Create team folder
         * @param {MessageTemplateFoldersApiCreateNewFolder1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFolder_2(requestParameters: MessageTemplateFoldersApiCreateNewFolder1Request, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewFolder_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a message template folder and child folders/templates
         * @summary Delete folder
         * @param {MessageTemplateFoldersApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder(requestParameters: MessageTemplateFoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateFoldersDeleteFolderResponse> {
            return localVarFp.deleteFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the child message templates folders of a message template folder.
         * @summary Get child folders
         * @param {MessageTemplateFoldersApiGetChildFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildFolders(requestParameters: MessageTemplateFoldersApiGetChildFoldersRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateFoldersListFoldersResponse> {
            return localVarFp.getChildFolders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a message template folder.
         * @summary Get folder
         * @param {MessageTemplateFoldersApiGetFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder(requestParameters: MessageTemplateFoldersApiGetFolderRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the message template folders.
         * @summary List folders
         * @param {MessageTemplateFoldersApiListFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders(requestParameters: MessageTemplateFoldersApiListFoldersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateFoldersListFoldersResponse> {
            return localVarFp.listFolders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the message template folders belonging to the requested team (workspace).
         * @summary List team folders
         * @param {MessageTemplateFoldersApiListTeamFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamFolders(requestParameters: MessageTemplateFoldersApiListTeamFoldersRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateFoldersListFoldersResponse> {
            return localVarFp.listTeamFolders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the message template folders belonging to the requested teammate.
         * @summary List teammate folders
         * @param {MessageTemplateFoldersApiListTeammateFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateFolders(requestParameters: MessageTemplateFoldersApiListTeammateFoldersRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateFoldersListFoldersResponse> {
            return localVarFp.listTeammateFolders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update message template folder
         * @summary Update folder
         * @param {MessageTemplateFoldersApiUpdateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolder(requestParameters: MessageTemplateFoldersApiUpdateFolderRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createChildFolder operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiCreateChildFolderRequest
 */
export type MessageTemplateFoldersApiCreateChildFolderRequest = {
    
    /**
    * The parent message template folder ID
    * @type {string}
    * @memberof MessageTemplateFoldersApiCreateChildFolder
    */
    readonly messageTemplateFolderId: string
    
} & CreateMessageTemplateFolderAsChild

/**
 * Request parameters for createNewFolder operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiCreateNewFolderRequest
 */
export type MessageTemplateFoldersApiCreateNewFolderRequest = {
    
} & CreateMessageTemplateFolder

/**
 * Request parameters for createNewFolder_1 operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiCreateNewFolder0Request
 */
export type MessageTemplateFoldersApiCreateNewFolder0Request = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof MessageTemplateFoldersApiCreateNewFolder0
    */
    readonly teammateId: string
    
} & CreateMessageTemplateFolder

/**
 * Request parameters for createNewFolder_2 operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiCreateNewFolder1Request
 */
export type MessageTemplateFoldersApiCreateNewFolder1Request = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof MessageTemplateFoldersApiCreateNewFolder1
    */
    readonly teamId: string
    
} & CreateMessageTemplateFolder

/**
 * Request parameters for deleteFolder operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiDeleteFolderRequest
 */
export type MessageTemplateFoldersApiDeleteFolderRequest = {
    
    /**
    * The message template folder id
    * @type {string}
    * @memberof MessageTemplateFoldersApiDeleteFolder
    */
    readonly messageTemplateFolderId: string
    
}

/**
 * Request parameters for getChildFolders operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiGetChildFoldersRequest
 */
export type MessageTemplateFoldersApiGetChildFoldersRequest = {
    
    /**
    * The message template folder ID
    * @type {string}
    * @memberof MessageTemplateFoldersApiGetChildFolders
    */
    readonly messageTemplateFolderId: string
    
}

/**
 * Request parameters for getFolder operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiGetFolderRequest
 */
export type MessageTemplateFoldersApiGetFolderRequest = {
    
    /**
    * The message template folder ID
    * @type {string}
    * @memberof MessageTemplateFoldersApiGetFolder
    */
    readonly messageTemplateFolderId: string
    
}

/**
 * Request parameters for listFolders operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiListFoldersRequest
 */
export type MessageTemplateFoldersApiListFoldersRequest = {
    
    /**
    * Field used to sort the message template folders. Either `created_at` or `updated_at`.
    * @type {string}
    * @memberof MessageTemplateFoldersApiListFolders
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof MessageTemplateFoldersApiListFolders
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listTeamFolders operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiListTeamFoldersRequest
 */
export type MessageTemplateFoldersApiListTeamFoldersRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof MessageTemplateFoldersApiListTeamFolders
    */
    readonly teamId: string
    
    /**
    * Field used to sort the message template folders. Either `created_at` or `updated_at`.
    * @type {string}
    * @memberof MessageTemplateFoldersApiListTeamFolders
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof MessageTemplateFoldersApiListTeamFolders
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listTeammateFolders operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiListTeammateFoldersRequest
 */
export type MessageTemplateFoldersApiListTeammateFoldersRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof MessageTemplateFoldersApiListTeammateFolders
    */
    readonly teammateId: string
    
    /**
    * Field used to sort the message template folders. Either `created_at` or `updated_at`.
    * @type {string}
    * @memberof MessageTemplateFoldersApiListTeammateFolders
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof MessageTemplateFoldersApiListTeammateFolders
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for updateFolder operation in MessageTemplateFoldersApi.
 * @export
 * @interface MessageTemplateFoldersApiUpdateFolderRequest
 */
export type MessageTemplateFoldersApiUpdateFolderRequest = {
    
    /**
    * The message template folder ID
    * @type {string}
    * @memberof MessageTemplateFoldersApiUpdateFolder
    */
    readonly messageTemplateFolderId: string
    
} & UpdateMessageTemplateFolder

/**
 * MessageTemplateFoldersApiGenerated - object-oriented interface
 * @export
 * @class MessageTemplateFoldersApiGenerated
 * @extends {BaseAPI}
 */
export class MessageTemplateFoldersApiGenerated extends BaseAPI {
    /**
     * Create a new message template folder as a child of the given folder
     * @summary Create child folder
     * @param {MessageTemplateFoldersApiCreateChildFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public createChildFolder(requestParameters: MessageTemplateFoldersApiCreateChildFolderRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).createChildFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message template folder.
     * @summary Create folder
     * @param {MessageTemplateFoldersApiCreateNewFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public createNewFolder(requestParameters: MessageTemplateFoldersApiCreateNewFolderRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).createNewFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message template folder belonging to the requested teammate.
     * @summary Create teammate folder
     * @param {MessageTemplateFoldersApiCreateNewFolder0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public createNewFolder_1(requestParameters: MessageTemplateFoldersApiCreateNewFolder0Request, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).createNewFolder_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message template folder belonging to the requested team (workspace).
     * @summary Create team folder
     * @param {MessageTemplateFoldersApiCreateNewFolder1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public createNewFolder_2(requestParameters: MessageTemplateFoldersApiCreateNewFolder1Request, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).createNewFolder_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a message template folder and child folders/templates
     * @summary Delete folder
     * @param {MessageTemplateFoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public deleteFolder(requestParameters: MessageTemplateFoldersApiDeleteFolderRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).deleteFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the child message templates folders of a message template folder.
     * @summary Get child folders
     * @param {MessageTemplateFoldersApiGetChildFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public getChildFolders(requestParameters: MessageTemplateFoldersApiGetChildFoldersRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).getChildFolders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a message template folder.
     * @summary Get folder
     * @param {MessageTemplateFoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public getFolder(requestParameters: MessageTemplateFoldersApiGetFolderRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).getFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the message template folders.
     * @summary List folders
     * @param {MessageTemplateFoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public listFolders(requestParameters: MessageTemplateFoldersApiListFoldersRequest = {}, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).listFolders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the message template folders belonging to the requested team (workspace).
     * @summary List team folders
     * @param {MessageTemplateFoldersApiListTeamFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public listTeamFolders(requestParameters: MessageTemplateFoldersApiListTeamFoldersRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).listTeamFolders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the message template folders belonging to the requested teammate.
     * @summary List teammate folders
     * @param {MessageTemplateFoldersApiListTeammateFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public listTeammateFolders(requestParameters: MessageTemplateFoldersApiListTeammateFoldersRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).listTeammateFolders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update message template folder
     * @summary Update folder
     * @param {MessageTemplateFoldersApiUpdateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateFoldersApiGenerated
     */
    public updateFolder(requestParameters: MessageTemplateFoldersApiUpdateFolderRequest, options?: AxiosRequestConfig) {
        return MessageTemplateFoldersApiFp(this.configuration).updateFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
