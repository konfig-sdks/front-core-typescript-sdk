/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateMessageTemplateAsChild } from '../models';
// @ts-ignore
import { CreatePrivateMessageTemplate } from '../models';
// @ts-ignore
import { CreateSharedMessageTemplate } from '../models';
// @ts-ignore
import { MessageTemplateFoldersListFoldersResponse } from '../models';
// @ts-ignore
import { MessageTemplatesListResponse } from '../models';
// @ts-ignore
import { UpdateMessageTemplate } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MessageTemplatesApi - axios parameter creator
 * @export
 */
export const MessageTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new message template for the given teammate
         * @summary Create teammate message template
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {CreatePrivateMessageTemplate} [createPrivateMessageTemplate] Message template to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewTeammateTemplate: async (teammateId: string, createPrivateMessageTemplate?: CreatePrivateMessageTemplate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('addNewTeammateTemplate', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/message_templates`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createPrivateMessageTemplate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/message_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createPrivateMessageTemplate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message template as a child of the given folder
         * @summary Create child template
         * @param {string} messageTemplateFolderId The parent message template folder ID
         * @param {CreateMessageTemplateAsChild} [createMessageTemplateAsChild] Message template to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildTemplate: async (messageTemplateFolderId: string, createMessageTemplateAsChild?: CreateMessageTemplateAsChild, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateFolderId' is not null or undefined
            assertParamExists('createChildTemplate', 'messageTemplateFolderId', messageTemplateFolderId)
            const localVarPath = `/message_template_folders/{message_template_folder_id}/message_templates`
                .replace(`{${"message_template_folder_id"}}`, encodeURIComponent(String(messageTemplateFolderId !== undefined ? messageTemplateFolderId : `-message_template_folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMessageTemplateAsChild,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders/{message_template_folder_id}/message_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageTemplateAsChild, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message template.
         * @summary Create message template
         * @param {CreateSharedMessageTemplate} [createSharedMessageTemplate] Message template to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTemplate: async (createSharedMessageTemplate?: CreateSharedMessageTemplate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/message_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createSharedMessageTemplate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createSharedMessageTemplate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message template for the given team (workspace).
         * @summary Create team message template
         * @param {string} teamId The team ID
         * @param {CreateSharedMessageTemplate} [createSharedMessageTemplate] Message template to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamTemplate: async (teamId: string, createSharedMessageTemplate?: CreateSharedMessageTemplate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createTeamTemplate', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/message_templates`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createSharedMessageTemplate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/message_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createSharedMessageTemplate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a message template
         * @summary Delete message template
         * @param {string} messageTemplateId The message template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (messageTemplateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateId' is not null or undefined
            assertParamExists('deleteTemplate', 'messageTemplateId', messageTemplateId)
            const localVarPath = `/message_templates/{message_template_id}`
                .replace(`{${"message_template_id"}}`, encodeURIComponent(String(messageTemplateId !== undefined ? messageTemplateId : `-message_template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_templates/{message_template_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the child message templates of a message template folder.
         * @summary Get child templates
         * @param {string} messageTemplateFolderId The message template folder ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildTemplates: async (messageTemplateFolderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateFolderId' is not null or undefined
            assertParamExists('getChildTemplates', 'messageTemplateFolderId', messageTemplateFolderId)
            const localVarPath = `/message_template_folders/{message_template_folder_id}/message_templates`
                .replace(`{${"message_template_folder_id"}}`, encodeURIComponent(String(messageTemplateFolderId !== undefined ? messageTemplateFolderId : `-message_template_folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_template_folders/{message_template_folder_id}/message_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a message template.
         * @summary Get message template
         * @param {string} messageTemplateId The message template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById: async (messageTemplateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateId' is not null or undefined
            assertParamExists('getTemplateById', 'messageTemplateId', messageTemplateId)
            const localVarPath = `/message_templates/{message_template_id}`
                .replace(`{${"message_template_id"}}`, encodeURIComponent(String(messageTemplateId !== undefined ? messageTemplateId : `-message_template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_templates/{message_template_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the message templates.
         * @summary List message templates
         * @param {string} [sortBy] Field used to sort the message templates. Either &#x60;created_at&#x60;, &#x60;updated_at&#x60;, or &#x60;sort_order&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/message_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the message templates belonging to the requested team (workspace).
         * @summary List team message templates
         * @param {string} teamId The team ID
         * @param {string} [sortBy] Field used to sort the message templates. Either &#x60;created_at&#x60;, &#x60;updated_at&#x60;, or &#x60;sort_order&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamTemplates: async (teamId: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeamTemplates', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/message_templates`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/message_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the message templates belonging to the requested teammate.
         * @summary List teammate message templates
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {string} [sortBy] Field used to sort the message templates. Either &#x60;created_at&#x60;, &#x60;updated_at&#x60;, or &#x60;sort_order&#x60;.
         * @param {'asc' | 'desc'} [sortOrder] Order by which results should be sorted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateTemplates: async (teammateId: string, sortBy?: string, sortOrder?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('listTeammateTemplates', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/message_templates`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/message_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update message template
         * @summary Update message template
         * @param {string} messageTemplateId The message template ID
         * @param {UpdateMessageTemplate} [updateMessageTemplate] Message template to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateById: async (messageTemplateId: string, updateMessageTemplate?: UpdateMessageTemplate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplateId' is not null or undefined
            assertParamExists('updateTemplateById', 'messageTemplateId', messageTemplateId)
            const localVarPath = `/message_templates/{message_template_id}`
                .replace(`{${"message_template_id"}}`, encodeURIComponent(String(messageTemplateId !== undefined ? messageTemplateId : `-message_template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateMessageTemplate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/message_templates/{message_template_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateMessageTemplate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageTemplatesApi - functional programming interface
 * @export
 */
export const MessageTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new message template for the given teammate
         * @summary Create teammate message template
         * @param {MessageTemplatesApiAddNewTeammateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewTeammateTemplate(requestParameters: MessageTemplatesApiAddNewTeammateTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createPrivateMessageTemplate: CreatePrivateMessageTemplate = {
                name: requestParameters.name,
                subject: requestParameters.subject,
                body: requestParameters.body,
                folder_id: requestParameters.folder_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewTeammateTemplate(requestParameters.teammateId, createPrivateMessageTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message template as a child of the given folder
         * @summary Create child template
         * @param {MessageTemplatesApiCreateChildTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChildTemplate(requestParameters: MessageTemplatesApiCreateChildTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createMessageTemplateAsChild: CreateMessageTemplateAsChild = {
                name: requestParameters.name,
                subject: requestParameters.subject,
                body: requestParameters.body,
                inbox_ids: requestParameters.inbox_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChildTemplate(requestParameters.messageTemplateFolderId, createMessageTemplateAsChild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message template.
         * @summary Create message template
         * @param {MessageTemplatesApiCreateNewTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTemplate(requestParameters: MessageTemplatesApiCreateNewTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createSharedMessageTemplate: CreateSharedMessageTemplate = {
                name: requestParameters.name,
                subject: requestParameters.subject,
                body: requestParameters.body,
                folder_id: requestParameters.folder_id,
                inbox_ids: requestParameters.inbox_ids,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTemplate(createSharedMessageTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message template for the given team (workspace).
         * @summary Create team message template
         * @param {MessageTemplatesApiCreateTeamTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamTemplate(requestParameters: MessageTemplatesApiCreateTeamTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createSharedMessageTemplate: CreateSharedMessageTemplate = {
                name: requestParameters.name,
                subject: requestParameters.subject,
                body: requestParameters.body,
                folder_id: requestParameters.folder_id,
                inbox_ids: requestParameters.inbox_ids,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamTemplate(requestParameters.teamId, createSharedMessageTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a message template
         * @summary Delete message template
         * @param {MessageTemplatesApiDeleteTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(requestParameters: MessageTemplatesApiDeleteTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(requestParameters.messageTemplateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the child message templates of a message template folder.
         * @summary Get child templates
         * @param {MessageTemplatesApiGetChildTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChildTemplates(requestParameters: MessageTemplatesApiGetChildTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateFoldersListFoldersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChildTemplates(requestParameters.messageTemplateFolderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a message template.
         * @summary Get message template
         * @param {MessageTemplatesApiGetTemplateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplateById(requestParameters: MessageTemplatesApiGetTemplateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplateById(requestParameters.messageTemplateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the message templates.
         * @summary List message templates
         * @param {MessageTemplatesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: MessageTemplatesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplatesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the message templates belonging to the requested team (workspace).
         * @summary List team message templates
         * @param {MessageTemplatesApiListTeamTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamTemplates(requestParameters: MessageTemplatesApiListTeamTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplatesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamTemplates(requestParameters.teamId, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the message templates belonging to the requested teammate.
         * @summary List teammate message templates
         * @param {MessageTemplatesApiListTeammateTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeammateTemplates(requestParameters: MessageTemplatesApiListTeammateTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplatesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeammateTemplates(requestParameters.teammateId, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update message template
         * @summary Update message template
         * @param {MessageTemplatesApiUpdateTemplateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplateById(requestParameters: MessageTemplatesApiUpdateTemplateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const updateMessageTemplate: UpdateMessageTemplate = {
                name: requestParameters.name,
                subject: requestParameters.subject,
                body: requestParameters.body,
                folder_id: requestParameters.folder_id,
                inbox_ids: requestParameters.inbox_ids,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplateById(requestParameters.messageTemplateId, updateMessageTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageTemplatesApi - factory interface
 * @export
 */
export const MessageTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageTemplatesApiFp(configuration)
    return {
        /**
         * Create a new message template for the given teammate
         * @summary Create teammate message template
         * @param {MessageTemplatesApiAddNewTeammateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewTeammateTemplate(requestParameters: MessageTemplatesApiAddNewTeammateTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addNewTeammateTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message template as a child of the given folder
         * @summary Create child template
         * @param {MessageTemplatesApiCreateChildTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildTemplate(requestParameters: MessageTemplatesApiCreateChildTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createChildTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message template.
         * @summary Create message template
         * @param {MessageTemplatesApiCreateNewTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTemplate(requestParameters: MessageTemplatesApiCreateNewTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message template for the given team (workspace).
         * @summary Create team message template
         * @param {MessageTemplatesApiCreateTeamTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamTemplate(requestParameters: MessageTemplatesApiCreateTeamTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createTeamTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a message template
         * @summary Delete message template
         * @param {MessageTemplatesApiDeleteTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(requestParameters: MessageTemplatesApiDeleteTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the child message templates of a message template folder.
         * @summary Get child templates
         * @param {MessageTemplatesApiGetChildTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildTemplates(requestParameters: MessageTemplatesApiGetChildTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateFoldersListFoldersResponse> {
            return localVarFp.getChildTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a message template.
         * @summary Get message template
         * @param {MessageTemplatesApiGetTemplateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(requestParameters: MessageTemplatesApiGetTemplateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTemplateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the message templates.
         * @summary List message templates
         * @param {MessageTemplatesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: MessageTemplatesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MessageTemplatesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the message templates belonging to the requested team (workspace).
         * @summary List team message templates
         * @param {MessageTemplatesApiListTeamTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamTemplates(requestParameters: MessageTemplatesApiListTeamTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplatesListResponse> {
            return localVarFp.listTeamTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the message templates belonging to the requested teammate.
         * @summary List teammate message templates
         * @param {MessageTemplatesApiListTeammateTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeammateTemplates(requestParameters: MessageTemplatesApiListTeammateTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplatesListResponse> {
            return localVarFp.listTeammateTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update message template
         * @summary Update message template
         * @param {MessageTemplatesApiUpdateTemplateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateById(requestParameters: MessageTemplatesApiUpdateTemplateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateTemplateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewTeammateTemplate operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiAddNewTeammateTemplateRequest
 */
export type MessageTemplatesApiAddNewTeammateTemplateRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof MessageTemplatesApiAddNewTeammateTemplate
    */
    readonly teammateId: string
    
} & CreatePrivateMessageTemplate

/**
 * Request parameters for createChildTemplate operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiCreateChildTemplateRequest
 */
export type MessageTemplatesApiCreateChildTemplateRequest = {
    
    /**
    * The parent message template folder ID
    * @type {string}
    * @memberof MessageTemplatesApiCreateChildTemplate
    */
    readonly messageTemplateFolderId: string
    
} & CreateMessageTemplateAsChild

/**
 * Request parameters for createNewTemplate operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiCreateNewTemplateRequest
 */
export type MessageTemplatesApiCreateNewTemplateRequest = {
    
} & CreateSharedMessageTemplate

/**
 * Request parameters for createTeamTemplate operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiCreateTeamTemplateRequest
 */
export type MessageTemplatesApiCreateTeamTemplateRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof MessageTemplatesApiCreateTeamTemplate
    */
    readonly teamId: string
    
} & CreateSharedMessageTemplate

/**
 * Request parameters for deleteTemplate operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiDeleteTemplateRequest
 */
export type MessageTemplatesApiDeleteTemplateRequest = {
    
    /**
    * The message template ID
    * @type {string}
    * @memberof MessageTemplatesApiDeleteTemplate
    */
    readonly messageTemplateId: string
    
}

/**
 * Request parameters for getChildTemplates operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiGetChildTemplatesRequest
 */
export type MessageTemplatesApiGetChildTemplatesRequest = {
    
    /**
    * The message template folder ID
    * @type {string}
    * @memberof MessageTemplatesApiGetChildTemplates
    */
    readonly messageTemplateFolderId: string
    
}

/**
 * Request parameters for getTemplateById operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiGetTemplateByIdRequest
 */
export type MessageTemplatesApiGetTemplateByIdRequest = {
    
    /**
    * The message template ID
    * @type {string}
    * @memberof MessageTemplatesApiGetTemplateById
    */
    readonly messageTemplateId: string
    
}

/**
 * Request parameters for list operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiListRequest
 */
export type MessageTemplatesApiListRequest = {
    
    /**
    * Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`.
    * @type {string}
    * @memberof MessageTemplatesApiList
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof MessageTemplatesApiList
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listTeamTemplates operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiListTeamTemplatesRequest
 */
export type MessageTemplatesApiListTeamTemplatesRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof MessageTemplatesApiListTeamTemplates
    */
    readonly teamId: string
    
    /**
    * Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`.
    * @type {string}
    * @memberof MessageTemplatesApiListTeamTemplates
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof MessageTemplatesApiListTeamTemplates
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listTeammateTemplates operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiListTeammateTemplatesRequest
 */
export type MessageTemplatesApiListTeammateTemplatesRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof MessageTemplatesApiListTeammateTemplates
    */
    readonly teammateId: string
    
    /**
    * Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`.
    * @type {string}
    * @memberof MessageTemplatesApiListTeammateTemplates
    */
    readonly sortBy?: string
    
    /**
    * Order by which results should be sorted
    * @type {'asc' | 'desc'}
    * @memberof MessageTemplatesApiListTeammateTemplates
    */
    readonly sortOrder?: 'asc' | 'desc'
    
}

/**
 * Request parameters for updateTemplateById operation in MessageTemplatesApi.
 * @export
 * @interface MessageTemplatesApiUpdateTemplateByIdRequest
 */
export type MessageTemplatesApiUpdateTemplateByIdRequest = {
    
    /**
    * The message template ID
    * @type {string}
    * @memberof MessageTemplatesApiUpdateTemplateById
    */
    readonly messageTemplateId: string
    
} & UpdateMessageTemplate

/**
 * MessageTemplatesApiGenerated - object-oriented interface
 * @export
 * @class MessageTemplatesApiGenerated
 * @extends {BaseAPI}
 */
export class MessageTemplatesApiGenerated extends BaseAPI {
    /**
     * Create a new message template for the given teammate
     * @summary Create teammate message template
     * @param {MessageTemplatesApiAddNewTeammateTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public addNewTeammateTemplate(requestParameters: MessageTemplatesApiAddNewTeammateTemplateRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).addNewTeammateTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message template as a child of the given folder
     * @summary Create child template
     * @param {MessageTemplatesApiCreateChildTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public createChildTemplate(requestParameters: MessageTemplatesApiCreateChildTemplateRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).createChildTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message template.
     * @summary Create message template
     * @param {MessageTemplatesApiCreateNewTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public createNewTemplate(requestParameters: MessageTemplatesApiCreateNewTemplateRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).createNewTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message template for the given team (workspace).
     * @summary Create team message template
     * @param {MessageTemplatesApiCreateTeamTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public createTeamTemplate(requestParameters: MessageTemplatesApiCreateTeamTemplateRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).createTeamTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a message template
     * @summary Delete message template
     * @param {MessageTemplatesApiDeleteTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public deleteTemplate(requestParameters: MessageTemplatesApiDeleteTemplateRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).deleteTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the child message templates of a message template folder.
     * @summary Get child templates
     * @param {MessageTemplatesApiGetChildTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public getChildTemplates(requestParameters: MessageTemplatesApiGetChildTemplatesRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).getChildTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a message template.
     * @summary Get message template
     * @param {MessageTemplatesApiGetTemplateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public getTemplateById(requestParameters: MessageTemplatesApiGetTemplateByIdRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).getTemplateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the message templates.
     * @summary List message templates
     * @param {MessageTemplatesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public list(requestParameters: MessageTemplatesApiListRequest = {}, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the message templates belonging to the requested team (workspace).
     * @summary List team message templates
     * @param {MessageTemplatesApiListTeamTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public listTeamTemplates(requestParameters: MessageTemplatesApiListTeamTemplatesRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).listTeamTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the message templates belonging to the requested teammate.
     * @summary List teammate message templates
     * @param {MessageTemplatesApiListTeammateTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public listTeammateTemplates(requestParameters: MessageTemplatesApiListTeammateTemplatesRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).listTeammateTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update message template
     * @summary Update message template
     * @param {MessageTemplatesApiUpdateTemplateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiGenerated
     */
    public updateTemplateById(requestParameters: MessageTemplatesApiUpdateTemplateByIdRequest, options?: AxiosRequestConfig) {
        return MessageTemplatesApiFp(this.configuration).updateTemplateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
