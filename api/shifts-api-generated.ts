/* tslint:disable */
/* eslint-disable */
/*
Core API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommentsListMentionedTeammatesResponse } from '../models';
// @ts-ignore
import { CreateShift } from '../models';
// @ts-ignore
import { ShiftIntervals } from '../models';
// @ts-ignore
import { ShiftResponse } from '../models';
// @ts-ignore
import { ShiftsListShiftsResponse } from '../models';
// @ts-ignore
import { TeammateIds } from '../models';
// @ts-ignore
import { UpdateShift } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShiftsApi - axios parameter creator
 * @export
 */
export const ShiftsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add teammates to a shift. The selected teammates must be in the team that owns the shift.
         * @summary Add teammates to shift
         * @param {string} shiftId The Shift ID
         * @param {TeammateIds} [teammateIds] Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeammatesToShift: async (shiftId: string, teammateIds?: TeammateIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('addTeammatesToShift', 'shiftId', shiftId)
            const localVarPath = `/shift/{shift_id}/teammates`
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teammateIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shift/{shift_id}/teammates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teammateIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a shift.
         * @summary Create shift
         * @param {CreateShift} [createShift] Shift to create details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShift: async (createShift?: CreateShift, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createShift,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shifts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createShift, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a shift for a team (workspace).
         * @summary Create team shift
         * @param {string} teamId The Team ID
         * @param {CreateShift} [createShift] Shift to create details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamShift: async (teamId: string, createShift?: CreateShift, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createTeamShift', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/shifts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createShift,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/shifts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createShift, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a shift.
         * @summary Get shift
         * @param {string} shiftId The Shift ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShift: async (shiftId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('getShift', 'shiftId', shiftId)
            const localVarPath = `/shift/{shift_id}`
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shift/{shift_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the teammates assigned to a shift.
         * @summary List shift\'s teammates
         * @param {string} shiftId The Shift ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShiftTeammates: async (shiftId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('listShiftTeammates', 'shiftId', shiftId)
            const localVarPath = `/shift/{shift_id}/teammates`
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shift/{shift_id}/teammates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the shifts.
         * @summary List Shifts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShifts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shifts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the shifts for a team (workspace).
         * @summary List team Shifts
         * @param {string} teamId The team ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamShifts: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listTeamShifts', 'teamId', teamId)
            const localVarPath = `/teams/{team_id}/shifts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_id}/shifts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove teammates from a shift.
         * @summary Remove teammates from shift
         * @param {string} shiftId The Shift ID
         * @param {TeammateIds} [teammateIds] Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeammatesFromShift: async (shiftId: string, teammateIds?: TeammateIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('removeTeammatesFromShift', 'shiftId', shiftId)
            const localVarPath = `/shift/{shift_id}/teammates`
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teammateIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shift/{shift_id}/teammates',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teammateIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the shifts for the teammate.
         * @summary List Teammate Shifts
         * @param {string} teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teammateShiftsList: async (teammateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teammateId' is not null or undefined
            assertParamExists('teammateShiftsList', 'teammateId', teammateId)
            const localVarPath = `/teammates/{teammate_id}/shifts`
                .replace(`{${"teammate_id"}}`, encodeURIComponent(String(teammateId !== undefined ? teammateId : `-teammate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teammates/{teammate_id}/shifts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a shift.
         * @summary Update shift
         * @param {string} shiftId The Shift ID
         * @param {UpdateShift} [updateShift] Updated Shift Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShift: async (shiftId: string, updateShift?: UpdateShift, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('updateShift', 'shiftId', shiftId)
            const localVarPath = `/shifts/{shift_id}`
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateShift,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shifts/{shift_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateShift, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShiftsApi - functional programming interface
 * @export
 */
export const ShiftsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShiftsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add teammates to a shift. The selected teammates must be in the team that owns the shift.
         * @summary Add teammates to shift
         * @param {ShiftsApiAddTeammatesToShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTeammatesToShift(requestParameters: ShiftsApiAddTeammatesToShiftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const teammateIds: TeammateIds = {
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeammatesToShift(requestParameters.shiftId, teammateIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a shift.
         * @summary Create shift
         * @param {ShiftsApiCreateShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShift(requestParameters: ShiftsApiCreateShiftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftResponse>> {
            const createShift: CreateShift = {
                name: requestParameters.name,
                color: requestParameters.color,
                timezone: requestParameters.timezone,
                times: requestParameters.times,
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShift(createShift, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a shift for a team (workspace).
         * @summary Create team shift
         * @param {ShiftsApiCreateTeamShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamShift(requestParameters: ShiftsApiCreateTeamShiftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftResponse>> {
            const createShift: CreateShift = {
                name: requestParameters.name,
                color: requestParameters.color,
                timezone: requestParameters.timezone,
                times: requestParameters.times,
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamShift(requestParameters.teamId, createShift, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a shift.
         * @summary Get shift
         * @param {ShiftsApiGetShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShift(requestParameters: ShiftsApiGetShiftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShift(requestParameters.shiftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the teammates assigned to a shift.
         * @summary List shift\'s teammates
         * @param {ShiftsApiListShiftTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShiftTeammates(requestParameters: ShiftsApiListShiftTeammatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsListMentionedTeammatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShiftTeammates(requestParameters.shiftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the shifts.
         * @summary List Shifts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShifts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsListShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShifts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the shifts for a team (workspace).
         * @summary List team Shifts
         * @param {ShiftsApiListTeamShiftsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamShifts(requestParameters: ShiftsApiListTeamShiftsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsListShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamShifts(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove teammates from a shift.
         * @summary Remove teammates from shift
         * @param {ShiftsApiRemoveTeammatesFromShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTeammatesFromShift(requestParameters: ShiftsApiRemoveTeammatesFromShiftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const teammateIds: TeammateIds = {
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTeammatesFromShift(requestParameters.shiftId, teammateIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the shifts for the teammate.
         * @summary List Teammate Shifts
         * @param {ShiftsApiTeammateShiftsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teammateShiftsList(requestParameters: ShiftsApiTeammateShiftsListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsListShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teammateShiftsList(requestParameters.teammateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a shift.
         * @summary Update shift
         * @param {ShiftsApiUpdateShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShift(requestParameters: ShiftsApiUpdateShiftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateShift: UpdateShift = {
                name: requestParameters.name,
                color: requestParameters.color,
                timezone: requestParameters.timezone,
                times: requestParameters.times,
                teammate_ids: requestParameters.teammate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShift(requestParameters.shiftId, updateShift, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShiftsApi - factory interface
 * @export
 */
export const ShiftsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShiftsApiFp(configuration)
    return {
        /**
         * Add teammates to a shift. The selected teammates must be in the team that owns the shift.
         * @summary Add teammates to shift
         * @param {ShiftsApiAddTeammatesToShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeammatesToShift(requestParameters: ShiftsApiAddTeammatesToShiftRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addTeammatesToShift(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a shift.
         * @summary Create shift
         * @param {ShiftsApiCreateShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShift(requestParameters: ShiftsApiCreateShiftRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftResponse> {
            return localVarFp.createShift(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a shift for a team (workspace).
         * @summary Create team shift
         * @param {ShiftsApiCreateTeamShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamShift(requestParameters: ShiftsApiCreateTeamShiftRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftResponse> {
            return localVarFp.createTeamShift(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a shift.
         * @summary Get shift
         * @param {ShiftsApiGetShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShift(requestParameters: ShiftsApiGetShiftRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftResponse> {
            return localVarFp.getShift(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the teammates assigned to a shift.
         * @summary List shift\'s teammates
         * @param {ShiftsApiListShiftTeammatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShiftTeammates(requestParameters: ShiftsApiListShiftTeammatesRequest, options?: AxiosRequestConfig): AxiosPromise<CommentsListMentionedTeammatesResponse> {
            return localVarFp.listShiftTeammates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the shifts.
         * @summary List Shifts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShifts(options?: AxiosRequestConfig): AxiosPromise<ShiftsListShiftsResponse> {
            return localVarFp.listShifts(options).then((request) => request(axios, basePath));
        },
        /**
         * List the shifts for a team (workspace).
         * @summary List team Shifts
         * @param {ShiftsApiListTeamShiftsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamShifts(requestParameters: ShiftsApiListTeamShiftsRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftsListShiftsResponse> {
            return localVarFp.listTeamShifts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove teammates from a shift.
         * @summary Remove teammates from shift
         * @param {ShiftsApiRemoveTeammatesFromShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeammatesFromShift(requestParameters: ShiftsApiRemoveTeammatesFromShiftRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeTeammatesFromShift(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all the shifts for the teammate.
         * @summary List Teammate Shifts
         * @param {ShiftsApiTeammateShiftsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teammateShiftsList(requestParameters: ShiftsApiTeammateShiftsListRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftsListShiftsResponse> {
            return localVarFp.teammateShiftsList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shift.
         * @summary Update shift
         * @param {ShiftsApiUpdateShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShift(requestParameters: ShiftsApiUpdateShiftRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateShift(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTeammatesToShift operation in ShiftsApi.
 * @export
 * @interface ShiftsApiAddTeammatesToShiftRequest
 */
export type ShiftsApiAddTeammatesToShiftRequest = {
    
    /**
    * The Shift ID
    * @type {string}
    * @memberof ShiftsApiAddTeammatesToShift
    */
    readonly shiftId: string
    
} & TeammateIds

/**
 * Request parameters for createShift operation in ShiftsApi.
 * @export
 * @interface ShiftsApiCreateShiftRequest
 */
export type ShiftsApiCreateShiftRequest = {
    
} & CreateShift

/**
 * Request parameters for createTeamShift operation in ShiftsApi.
 * @export
 * @interface ShiftsApiCreateTeamShiftRequest
 */
export type ShiftsApiCreateTeamShiftRequest = {
    
    /**
    * The Team ID
    * @type {string}
    * @memberof ShiftsApiCreateTeamShift
    */
    readonly teamId: string
    
} & CreateShift

/**
 * Request parameters for getShift operation in ShiftsApi.
 * @export
 * @interface ShiftsApiGetShiftRequest
 */
export type ShiftsApiGetShiftRequest = {
    
    /**
    * The Shift ID
    * @type {string}
    * @memberof ShiftsApiGetShift
    */
    readonly shiftId: string
    
}

/**
 * Request parameters for listShiftTeammates operation in ShiftsApi.
 * @export
 * @interface ShiftsApiListShiftTeammatesRequest
 */
export type ShiftsApiListShiftTeammatesRequest = {
    
    /**
    * The Shift ID
    * @type {string}
    * @memberof ShiftsApiListShiftTeammates
    */
    readonly shiftId: string
    
}

/**
 * Request parameters for listTeamShifts operation in ShiftsApi.
 * @export
 * @interface ShiftsApiListTeamShiftsRequest
 */
export type ShiftsApiListTeamShiftsRequest = {
    
    /**
    * The team ID
    * @type {string}
    * @memberof ShiftsApiListTeamShifts
    */
    readonly teamId: string
    
}

/**
 * Request parameters for removeTeammatesFromShift operation in ShiftsApi.
 * @export
 * @interface ShiftsApiRemoveTeammatesFromShiftRequest
 */
export type ShiftsApiRemoveTeammatesFromShiftRequest = {
    
    /**
    * The Shift ID
    * @type {string}
    * @memberof ShiftsApiRemoveTeammatesFromShift
    */
    readonly shiftId: string
    
} & TeammateIds

/**
 * Request parameters for teammateShiftsList operation in ShiftsApi.
 * @export
 * @interface ShiftsApiTeammateShiftsListRequest
 */
export type ShiftsApiTeammateShiftsListRequest = {
    
    /**
    * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof ShiftsApiTeammateShiftsList
    */
    readonly teammateId: string
    
}

/**
 * Request parameters for updateShift operation in ShiftsApi.
 * @export
 * @interface ShiftsApiUpdateShiftRequest
 */
export type ShiftsApiUpdateShiftRequest = {
    
    /**
    * The Shift ID
    * @type {string}
    * @memberof ShiftsApiUpdateShift
    */
    readonly shiftId: string
    
} & UpdateShift

/**
 * ShiftsApiGenerated - object-oriented interface
 * @export
 * @class ShiftsApiGenerated
 * @extends {BaseAPI}
 */
export class ShiftsApiGenerated extends BaseAPI {
    /**
     * Add teammates to a shift. The selected teammates must be in the team that owns the shift.
     * @summary Add teammates to shift
     * @param {ShiftsApiAddTeammatesToShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public addTeammatesToShift(requestParameters: ShiftsApiAddTeammatesToShiftRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).addTeammatesToShift(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a shift.
     * @summary Create shift
     * @param {ShiftsApiCreateShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public createShift(requestParameters: ShiftsApiCreateShiftRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).createShift(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a shift for a team (workspace).
     * @summary Create team shift
     * @param {ShiftsApiCreateTeamShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public createTeamShift(requestParameters: ShiftsApiCreateTeamShiftRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).createTeamShift(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a shift.
     * @summary Get shift
     * @param {ShiftsApiGetShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public getShift(requestParameters: ShiftsApiGetShiftRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).getShift(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the teammates assigned to a shift.
     * @summary List shift\'s teammates
     * @param {ShiftsApiListShiftTeammatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public listShiftTeammates(requestParameters: ShiftsApiListShiftTeammatesRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).listShiftTeammates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the shifts.
     * @summary List Shifts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public listShifts(options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).listShifts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the shifts for a team (workspace).
     * @summary List team Shifts
     * @param {ShiftsApiListTeamShiftsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public listTeamShifts(requestParameters: ShiftsApiListTeamShiftsRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).listTeamShifts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove teammates from a shift.
     * @summary Remove teammates from shift
     * @param {ShiftsApiRemoveTeammatesFromShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public removeTeammatesFromShift(requestParameters: ShiftsApiRemoveTeammatesFromShiftRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).removeTeammatesFromShift(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all the shifts for the teammate.
     * @summary List Teammate Shifts
     * @param {ShiftsApiTeammateShiftsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public teammateShiftsList(requestParameters: ShiftsApiTeammateShiftsListRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).teammateShiftsList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a shift.
     * @summary Update shift
     * @param {ShiftsApiUpdateShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public updateShift(requestParameters: ShiftsApiUpdateShiftRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).updateShift(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
